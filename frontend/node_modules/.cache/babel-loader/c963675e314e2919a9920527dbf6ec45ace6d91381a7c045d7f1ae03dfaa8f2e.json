{"ast":null,"code":"var _jsxFileName = \"/home/tazmak/Desktop/2024_Code/py-Projects/FRED-tracker/Federal-Reserve-Economy-Tracker/frontend/src/components/charts/BarChart.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js/auto';\n// Import required Chart.js adapters\nimport 'chartjs-adapter-date-fns';\nimport { formatDate } from '../../utils/dateUtils';\n\n/**\n * BarChart component for displaying time series data as bars\n * @param {Object} props - Component props\n * @param {Array} props.data - Array of data objects\n * @param {string} props.xKey - Key for X-axis values in data objects\n * @param {string} props.yKey - Key for Y-axis values in data objects\n * @param {string} props.title - Chart title\n * @param {Function} props.tooltipFormatter - Function to format tooltip values\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BarChart = ({\n  data,\n  xKey = 'date',\n  yKey = 'value',\n  title = '',\n  tooltipFormatter = null\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  useEffect(() => {\n    // refreshing the chart\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    if (!data || data.length === 0 || !chartRef.current) {\n      return;\n    }\n    const ctx = chartRef.current.getContext('2d');\n\n    // Determine positive and negative values to color bars accordingly\n    const positiveColor = 'rgba(77, 175, 74, 0.7)'; // Green\n    const negativeColor = 'rgba(214, 39, 40, 0.7)'; // Red\n    const borderPositiveColor = 'rgba(77, 175, 74, 1)';\n    const borderNegativeColor = 'rgba(214, 39, 40, 1)';\n    const colors = data.map(item => parseFloat(item[yKey]) >= 0 ? positiveColor : negativeColor);\n    const borderColors = data.map(item => parseFloat(item[yKey]) >= 0 ? borderPositiveColor : borderNegativeColor);\n\n    // Prepare chart data\n    const chartData = {\n      labels: data.map(item => item[xKey]),\n      datasets: [{\n        label: title,\n        data: data.map(item => item[yKey]),\n        backgroundColor: colors,\n        borderColor: borderColors,\n        borderWidth: 1\n      }]\n    };\n\n    // Create new chart\n    chartInstance.current = new Chart(ctx, {\n      type: 'bar',\n      data: chartData,\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            display: false\n          },\n          tooltip: {\n            callbacks: {\n              title: function (tooltipItems) {\n                // Format the date for tooltip title\n                return formatDate(tooltipItems[0].label);\n              },\n              label: function (context) {\n                let value = context.parsed.y;\n\n                // Use custom formatter if provided\n                if (tooltipFormatter) {\n                  return tooltipFormatter(value);\n                }\n\n                // Default formatting\n                return value.toFixed(2);\n              }\n            }\n          }\n        },\n        scales: {\n          x: {\n            type: 'time',\n            time: {\n              parser: 'yyyy-MM-dd',\n              tooltipFormat: 'MMM d, yyyy',\n              unit: 'quarter',\n              displayFormats: {\n                quarter: 'MMM yyyy'\n              }\n            },\n            title: {\n              display: false\n            },\n            grid: {\n              display: false\n            },\n            ticks: {\n              autoSkip: true,\n              maxTicksLimit: 20\n            }\n          },\n          y: {\n            beginAtZero: false,\n            title: {\n              display: false\n            },\n            grid: {\n              color: '#eee'\n            }\n          }\n        }\n      }\n    });\n\n    // Cleanup function\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [data, xKey, yKey, title, tooltipFormatter]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef,\n      height: \"250\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n_s(BarChart, \"u5+iHnwD4hjVcMuzTE/TbI78erc=\");\n_c = BarChart;\nexport default BarChart;\nvar _c;\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"names":["React","useRef","useEffect","Chart","formatDate","jsxDEV","_jsxDEV","BarChart","data","xKey","yKey","title","tooltipFormatter","_s","chartRef","chartInstance","current","destroy","length","ctx","getContext","positiveColor","negativeColor","borderPositiveColor","borderNegativeColor","colors","map","item","parseFloat","borderColors","chartData","labels","datasets","label","backgroundColor","borderColor","borderWidth","type","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","callbacks","tooltipItems","context","value","parsed","y","toFixed","scales","x","time","parser","tooltipFormat","unit","displayFormats","quarter","grid","ticks","autoSkip","maxTicksLimit","beginAtZero","color","className","children","ref","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/tazmak/Desktop/2024_Code/py-Projects/FRED-tracker/Federal-Reserve-Economy-Tracker/frontend/src/components/charts/BarChart.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js/auto';\n// Import required Chart.js adapters\nimport 'chartjs-adapter-date-fns';\nimport { formatDate } from '../../utils/dateUtils';\n\n/**\n * BarChart component for displaying time series data as bars\n * @param {Object} props - Component props\n * @param {Array} props.data - Array of data objects\n * @param {string} props.xKey - Key for X-axis values in data objects\n * @param {string} props.yKey - Key for Y-axis values in data objects\n * @param {string} props.title - Chart title\n * @param {Function} props.tooltipFormatter - Function to format tooltip values\n */\nconst BarChart = ({ \n  data, \n  xKey = 'date', \n  yKey = 'value', \n  title = '',\n  tooltipFormatter = null\n}) => {\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n\n  useEffect(() => {\n    // refreshing the chart\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    \n    if (!data || data.length === 0 || !chartRef.current) {\n      return;\n    }\n    \n    const ctx = chartRef.current.getContext('2d');\n    \n    // Determine positive and negative values to color bars accordingly\n    const positiveColor = 'rgba(77, 175, 74, 0.7)';  // Green\n    const negativeColor = 'rgba(214, 39, 40, 0.7)';  // Red\n    const borderPositiveColor = 'rgba(77, 175, 74, 1)';\n    const borderNegativeColor = 'rgba(214, 39, 40, 1)';\n    \n    const colors = data.map(item => parseFloat(item[yKey]) >= 0 ? positiveColor : negativeColor);\n    const borderColors = data.map(item => parseFloat(item[yKey]) >= 0 ? borderPositiveColor : borderNegativeColor);\n    \n    // Prepare chart data\n    const chartData = {\n      labels: data.map(item => item[xKey]),\n      datasets: [\n        {\n          label: title,\n          data: data.map(item => item[yKey]),\n          backgroundColor: colors,\n          borderColor: borderColors,\n          borderWidth: 1\n        }\n      ]\n    };\n    \n    // Create new chart\n    chartInstance.current = new Chart(ctx, {\n      type: 'bar',\n      data: chartData,\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            display: false,\n          },\n          tooltip: {\n            callbacks: {\n              title: function(tooltipItems) {\n                // Format the date for tooltip title\n                return formatDate(tooltipItems[0].label);\n              },\n              label: function(context) {\n                let value = context.parsed.y;\n                \n                // Use custom formatter if provided\n                if (tooltipFormatter) {\n                  return tooltipFormatter(value);\n                }\n                \n                // Default formatting\n                return value.toFixed(2);\n              }\n            }\n          }\n        },\n        scales: {\n          x: {\n            type: 'time',\n            time: {\n              parser: 'yyyy-MM-dd',\n              tooltipFormat: 'MMM d, yyyy',\n              unit: 'quarter',\n              displayFormats: {\n                quarter: 'MMM yyyy'\n              }\n            },\n            title: {\n              display: false\n            },\n            grid: {\n              display: false\n            },\n            ticks: {\n              autoSkip: true,\n              maxTicksLimit: 20\n            }\n          },\n          y: {\n            beginAtZero: false,\n            title: {\n              display: false\n            },\n            grid: {\n              color: '#eee'\n            }\n          }\n        }\n      }\n    });\n    \n    // Cleanup function\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [data, xKey, yKey, title, tooltipFormatter]);\n\n  return (\n    <div className=\"chart-container\">\n      <canvas ref={chartRef} height=\"250\"></canvas>\n    </div>\n  );\n};\n\nexport default BarChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}