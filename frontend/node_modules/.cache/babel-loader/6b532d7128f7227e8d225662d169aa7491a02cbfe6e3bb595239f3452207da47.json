{"ast":null,"code":"/**\n * number as a percentage\n * @param {number} value - Value to format\n * @param {number} decimals - Number of decimal places\n * @returns {string} Formatted percentage\n */\nexport const formatPercentage = (value, decimals = 1) => {\n  if (value === null || value === undefined) return 'N/A';\n  return `${Number(value).toFixed(decimals)}%`;\n};\n\n/**\n * number as currency\n * @param {number} value - Value to format\n * @param {string} currency - Currency code\n * @param {number} decimals - Number of decimal places\n * @returns {string} Formatted currency\n */\nexport const formatCurrency = (value, currency = 'USD', decimals = 2) => {\n  if (value === null || value === undefined) return 'N/A';\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency,\n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals\n  }).format(value);\n};\n\n/**\n * formatting a large number with commas and abbreviations\n * @param {number} value - Value to format\n * @param {number} decimals - Number of decimal places\n * @returns {string} Formatted number\n */\nexport const formatNumber = (value, decimals = 1) => {\n  if (value === null || value === undefined) return 'N/A';\n  if (Math.abs(value) >= 1000000000) {\n    return `${(value / 1000000000).toFixed(decimals)}B`;\n  }\n  if (Math.abs(value) >= 1000000) {\n    return `${(value / 1000000).toFixed(decimals)}M`;\n  }\n  if (Math.abs(value) >= 1000) {\n    return `${(value / 1000).toFixed(decimals)}K`;\n  }\n  return value.toFixed(decimals);\n};\n\n/**\n * get appropriate formatter based on indicator type\n * @param {string} indicator - Indicator ID or type\n * @returns {Function} Formatter function\n */\nexport const getFormatter = indicator => {\n  // Percentage indicators\n  const percentageIndicators = ['UNRATE',\n  // Unemployment Rate\n  'FEDFUNDS',\n  // Federal Funds Rate\n  'T10Y2Y',\n  // 10-Year Treasury Constant Maturity Minus 2-Year\n  'CPIAUCSL',\n  // CPI (when formatted as percent change)\n  'PCEPI',\n  // PCE Price Index (when formatted as percent change)\n  'A191RI1Q225SBEA' // Real GDP percent change\n  ];\n\n  // Currency indicators\n  const currencyIndicators = ['GDP',\n  // Gross Domestic Product\n  'GDPC1' // Real Gross Domestic Product\n  ];\n  if (percentageIndicators.includes(indicator)) {\n    return value => formatPercentage(value);\n  }\n  if (currencyIndicators.includes(indicator)) {\n    return value => formatCurrency(value, 'USD');\n  }\n\n  // Default to regular number formatting\n  return value => formatNumber(value);\n};","map":{"version":3,"names":["formatPercentage","value","decimals","undefined","Number","toFixed","formatCurrency","currency","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","formatNumber","Math","abs","getFormatter","indicator","percentageIndicators","currencyIndicators","includes"],"sources":["/home/tazmak/Desktop/2024_Code/py-Projects/FRED-tracker/Federal-Reserve-Economy-Tracker/frontend/src/utils/formatUtils.js"],"sourcesContent":["/**\n * number as a percentage\n * @param {number} value - Value to format\n * @param {number} decimals - Number of decimal places\n * @returns {string} Formatted percentage\n */\nexport const formatPercentage = (value, decimals = 1) => {\n    if (value === null || value === undefined) return 'N/A';\n    \n    return `${Number(value).toFixed(decimals)}%`;\n  };\n  \n  /**\n   * number as currency\n   * @param {number} value - Value to format\n   * @param {string} currency - Currency code\n   * @param {number} decimals - Number of decimal places\n   * @returns {string} Formatted currency\n   */\n  export const formatCurrency = (value, currency = 'USD', decimals = 2) => {\n    if (value === null || value === undefined) return 'N/A';\n    \n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency,\n      minimumFractionDigits: decimals,\n      maximumFractionDigits: decimals,\n    }).format(value);\n  };\n  \n  /**\n   * formatting a large number with commas and abbreviations\n   * @param {number} value - Value to format\n   * @param {number} decimals - Number of decimal places\n   * @returns {string} Formatted number\n   */\n  export const formatNumber = (value, decimals = 1) => {\n    if (value === null || value === undefined) return 'N/A';\n    \n    if (Math.abs(value) >= 1000000000) {\n      return `${(value / 1000000000).toFixed(decimals)}B`;\n    }\n    \n    if (Math.abs(value) >= 1000000) {\n      return `${(value / 1000000).toFixed(decimals)}M`;\n    }\n    \n    if (Math.abs(value) >= 1000) {\n      return `${(value / 1000).toFixed(decimals)}K`;\n    }\n    \n    return value.toFixed(decimals);\n  };\n  \n  /**\n   * get appropriate formatter based on indicator type\n   * @param {string} indicator - Indicator ID or type\n   * @returns {Function} Formatter function\n   */\n  export const getFormatter = (indicator) => {\n    // Percentage indicators\n    const percentageIndicators = [\n      'UNRATE',  // Unemployment Rate\n      'FEDFUNDS', // Federal Funds Rate\n      'T10Y2Y',   // 10-Year Treasury Constant Maturity Minus 2-Year\n      'CPIAUCSL', // CPI (when formatted as percent change)\n      'PCEPI',    // PCE Price Index (when formatted as percent change)\n      'A191RI1Q225SBEA', // Real GDP percent change\n    ];\n    \n    // Currency indicators\n    const currencyIndicators = [\n      'GDP',      // Gross Domestic Product\n      'GDPC1',    // Real Gross Domestic Product\n    ];\n    \n    if (percentageIndicators.includes(indicator)) {\n      return (value) => formatPercentage(value);\n    }\n    \n    if (currencyIndicators.includes(indicator)) {\n      return (value) => formatCurrency(value, 'USD');\n    }\n    \n    // Default to regular number formatting\n    return (value) => formatNumber(value);\n  };"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,gBAAgB,GAAGA,CAACC,KAAK,EAAEC,QAAQ,GAAG,CAAC,KAAK;EACrD,IAAID,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKE,SAAS,EAAE,OAAO,KAAK;EAEvD,OAAO,GAAGC,MAAM,CAACH,KAAK,CAAC,CAACI,OAAO,CAACH,QAAQ,CAAC,GAAG;AAC9C,CAAC;;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACE,OAAO,MAAMI,cAAc,GAAGA,CAACL,KAAK,EAAEM,QAAQ,GAAG,KAAK,EAAEL,QAAQ,GAAG,CAAC,KAAK;EACvE,IAAID,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKE,SAAS,EAAE,OAAO,KAAK;EAEvD,OAAO,IAAIK,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;IACpCC,KAAK,EAAE,UAAU;IACjBH,QAAQ;IACRI,qBAAqB,EAAET,QAAQ;IAC/BU,qBAAqB,EAAEV;EACzB,CAAC,CAAC,CAACW,MAAM,CAACZ,KAAK,CAAC;AAClB,CAAC;;AAED;AACF;AACA;AACA;AACA;AACA;AACE,OAAO,MAAMa,YAAY,GAAGA,CAACb,KAAK,EAAEC,QAAQ,GAAG,CAAC,KAAK;EACnD,IAAID,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKE,SAAS,EAAE,OAAO,KAAK;EAEvD,IAAIY,IAAI,CAACC,GAAG,CAACf,KAAK,CAAC,IAAI,UAAU,EAAE;IACjC,OAAO,GAAG,CAACA,KAAK,GAAG,UAAU,EAAEI,OAAO,CAACH,QAAQ,CAAC,GAAG;EACrD;EAEA,IAAIa,IAAI,CAACC,GAAG,CAACf,KAAK,CAAC,IAAI,OAAO,EAAE;IAC9B,OAAO,GAAG,CAACA,KAAK,GAAG,OAAO,EAAEI,OAAO,CAACH,QAAQ,CAAC,GAAG;EAClD;EAEA,IAAIa,IAAI,CAACC,GAAG,CAACf,KAAK,CAAC,IAAI,IAAI,EAAE;IAC3B,OAAO,GAAG,CAACA,KAAK,GAAG,IAAI,EAAEI,OAAO,CAACH,QAAQ,CAAC,GAAG;EAC/C;EAEA,OAAOD,KAAK,CAACI,OAAO,CAACH,QAAQ,CAAC;AAChC,CAAC;;AAED;AACF;AACA;AACA;AACA;AACE,OAAO,MAAMe,YAAY,GAAIC,SAAS,IAAK;EACzC;EACA,MAAMC,oBAAoB,GAAG,CAC3B,QAAQ;EAAG;EACX,UAAU;EAAE;EACZ,QAAQ;EAAI;EACZ,UAAU;EAAE;EACZ,OAAO;EAAK;EACZ,iBAAiB,CAAE;EAAA,CACpB;;EAED;EACA,MAAMC,kBAAkB,GAAG,CACzB,KAAK;EAAO;EACZ,OAAO,CAAK;EAAA,CACb;EAED,IAAID,oBAAoB,CAACE,QAAQ,CAACH,SAAS,CAAC,EAAE;IAC5C,OAAQjB,KAAK,IAAKD,gBAAgB,CAACC,KAAK,CAAC;EAC3C;EAEA,IAAImB,kBAAkB,CAACC,QAAQ,CAACH,SAAS,CAAC,EAAE;IAC1C,OAAQjB,KAAK,IAAKK,cAAc,CAACL,KAAK,EAAE,KAAK,CAAC;EAChD;;EAEA;EACA,OAAQA,KAAK,IAAKa,YAAY,CAACb,KAAK,CAAC;AACvC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}