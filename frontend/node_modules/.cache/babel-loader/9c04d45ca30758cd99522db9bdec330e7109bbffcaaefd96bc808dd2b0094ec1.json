{"ast":null,"code":"import { format, parseISO, subYears, subMonths } from 'date-fns';\n\n/**\n * Format a date string to display format\n * @param {string} dateString - ISO date string\n * @param {string} formatStr - Format string\n * @returns {string} Formatted date string\n */\nexport const formatDate = (dateString, formatStr = 'MMM d, yyyy') => {\n  try {\n    const date = parseISO(dateString);\n    return format(date, formatStr);\n  } catch (error) {\n    console.error('Error formatting date:', error);\n    return dateString;\n  }\n};\n\n/**\n * Get date range for time periods\n * @param {string} period - Time periods\n * @returns {Object} Start and end dates\n */\nexport const getDateRange = period => {\n  const today = new Date();\n  const endDate = format(today, 'yyyy-MM-dd');\n  let startDate;\n  switch (period) {\n    case '1y':\n      startDate = format(subYears(today, 1), 'yyyy-MM-dd');\n      break;\n    case '5y':\n      startDate = format(subYears(today, 5), 'yyyy-MM-dd');\n      break;\n    case '10y':\n      startDate = format(subYears(today, 10), 'yyyy-MM-dd');\n      break;\n    case 'ytd':\n      startDate = `${today.getFullYear()}-01-01`;\n      break;\n    case '6m':\n      startDate = format(subMonths(today, 6), 'yyyy-MM-dd');\n      break;\n    case 'all':\n    default:\n      startDate = format(subYears(today, 20), 'yyyy-MM-dd'); // default setting is to 20 years\n      break;\n  }\n  return {\n    startDate,\n    endDate\n  };\n};","map":{"version":3,"names":["format","parseISO","subYears","subMonths","formatDate","dateString","formatStr","date","error","console","getDateRange","period","today","Date","endDate","startDate","getFullYear"],"sources":["/home/tazmak/Desktop/2024_Code/py-Projects/FRED-tracker/Federal-Reserve-Economy-Tracker/frontend/src/utils/dateUtils.js"],"sourcesContent":["import { format, parseISO, subYears, subMonths } from 'date-fns';\n\n/**\n * Format a date string to display format\n * @param {string} dateString - ISO date string\n * @param {string} formatStr - Format string\n * @returns {string} Formatted date string\n */\nexport const formatDate = (dateString, formatStr = 'MMM d, yyyy') => {\n  try {\n    const date = parseISO(dateString);\n    return format(date, formatStr);\n  } catch (error) {\n    console.error('Error formatting date:', error);\n    return dateString;\n  }\n};\n\n/**\n * Get date range for time periods\n * @param {string} period - Time periods\n * @returns {Object} Start and end dates\n */\nexport const getDateRange = (period) => {\n  const today = new Date();\n  const endDate = format(today, 'yyyy-MM-dd');\n  let startDate;\n\n  switch (period) {\n    case '1y':\n      startDate = format(subYears(today, 1), 'yyyy-MM-dd');\n      break;\n    case '5y':\n      startDate = format(subYears(today, 5), 'yyyy-MM-dd');\n      break;\n    case '10y':\n      startDate = format(subYears(today, 10), 'yyyy-MM-dd');\n      break;\n    case 'ytd':\n      startDate = `${today.getFullYear()}-01-01`;\n      break;\n    case '6m':\n      startDate = format(subMonths(today, 6), 'yyyy-MM-dd');\n      break;\n    case 'all':\n    default:\n      startDate = format(subYears(today, 20), 'yyyy-MM-dd'); // default setting is to 20 years\n      break;\n  }\n\n  return { startDate, endDate };\n};"],"mappings":"AAAA,SAASA,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,UAAU;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAGA,CAACC,UAAU,EAAEC,SAAS,GAAG,aAAa,KAAK;EACnE,IAAI;IACF,MAAMC,IAAI,GAAGN,QAAQ,CAACI,UAAU,CAAC;IACjC,OAAOL,MAAM,CAACO,IAAI,EAAED,SAAS,CAAC;EAChC,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAOH,UAAU;EACnB;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,YAAY,GAAIC,MAAM,IAAK;EACtC,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;EACxB,MAAMC,OAAO,GAAGd,MAAM,CAACY,KAAK,EAAE,YAAY,CAAC;EAC3C,IAAIG,SAAS;EAEb,QAAQJ,MAAM;IACZ,KAAK,IAAI;MACPI,SAAS,GAAGf,MAAM,CAACE,QAAQ,CAACU,KAAK,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC;MACpD;IACF,KAAK,IAAI;MACPG,SAAS,GAAGf,MAAM,CAACE,QAAQ,CAACU,KAAK,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC;MACpD;IACF,KAAK,KAAK;MACRG,SAAS,GAAGf,MAAM,CAACE,QAAQ,CAACU,KAAK,EAAE,EAAE,CAAC,EAAE,YAAY,CAAC;MACrD;IACF,KAAK,KAAK;MACRG,SAAS,GAAG,GAAGH,KAAK,CAACI,WAAW,CAAC,CAAC,QAAQ;MAC1C;IACF,KAAK,IAAI;MACPD,SAAS,GAAGf,MAAM,CAACG,SAAS,CAACS,KAAK,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC;MACrD;IACF,KAAK,KAAK;IACV;MACEG,SAAS,GAAGf,MAAM,CAACE,QAAQ,CAACU,KAAK,EAAE,EAAE,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC;MACvD;EACJ;EAEA,OAAO;IAAEG,SAAS;IAAED;EAAQ,CAAC;AAC/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}