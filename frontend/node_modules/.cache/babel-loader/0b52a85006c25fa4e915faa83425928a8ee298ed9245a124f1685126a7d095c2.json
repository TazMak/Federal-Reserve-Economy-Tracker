{"ast":null,"code":"var _jsxFileName = \"/home/tazmak/Desktop/2024_Code/py-Projects/FRED-tracker/Federal-Reserve-Economy-Tracker/frontend/src/components/indicators/RegionalData.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\n\n// United States GeoJSON - using a reliable source\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\n/**\n * RegionalData component for displaying economic data by state on an interactive map\n */\nconst RegionalData = () => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [hoveredState, setHoveredState] = useState(null);\n  const [selectedIndicator, setSelectedIndicator] = useState('MSPUS'); // Default to Median House Price\n  const [stateColors, setStateColors] = useState({});\n  const [allStatesData, setAllStatesData] = useState({});\n\n  // Available indicators\n  const indicators = [{\n    id: 'UNRATE',\n    name: 'Unemployment Rate'\n  }, {\n    id: 'MSPUS',\n    name: 'Median House Price'\n  }, {\n    id: 'PCPI',\n    name: 'Per Capita Personal Income'\n  }];\n\n  // Fetch data for all states\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n\n        // For debugging - log the API URL\n        console.log(`Fetching data from: /api/regional/${selectedIndicator}`);\n        const response = await axios.get(`/api/regional/${selectedIndicator}`);\n\n        // Debug: Log the API response\n        console.log(\"API Response:\", response.data);\n\n        // Process data for map coloring\n        const stateData = {};\n        const colorData = {};\n\n        // Check if we have valid state data\n        if (!response.data.states || response.data.states.length === 0) {\n          throw new Error(\"No state data received from API\");\n        }\n\n        // Get min/max values for normalization\n        const values = response.data.states.filter(state => state.value !== null && state.value !== undefined).map(state => state.value);\n        if (values.length === 0) {\n          throw new Error(\"No valid values found in state data\");\n        }\n        const minValue = Math.min(...values);\n        const maxValue = Math.max(...values);\n        const valueRange = maxValue - minValue;\n        console.log(\"Value range:\", minValue, \"to\", maxValue);\n\n        // Process each state\n        response.data.states.forEach(state => {\n          // Store the state data\n          stateData[state.code] = state;\n\n          // Calculate color\n          if (state.value !== null && state.value !== undefined) {\n            // Normalize value between 0 and 1\n            const normalizedValue = valueRange > 0 ? (state.value - minValue) / valueRange : 0.5; // Default to middle value if range is 0\n\n            // Generate color based on indicator\n            let color;\n            if (selectedIndicator === 'UNRATE') {\n              // For unemployment, red is high (bad), green is low (good)\n              const r = Math.floor(normalizedValue * 255);\n              const g = Math.floor((1 - normalizedValue) * 255);\n              color = `rgb(${r}, ${g}, 0)`;\n            } else {\n              // For income/housing prices, green is high (good), red is low (bad)\n              const r = Math.floor((1 - normalizedValue) * 255);\n              const g = Math.floor(normalizedValue * 255);\n              color = `rgb(${r}, ${g}, 0)`;\n            }\n            colorData[state.code] = {\n              color,\n              value: state.value\n            };\n\n            // Debug: Log a few states and their colors\n            if (state.code === 'CA' || state.code === 'TX' || state.code === 'NY') {\n              console.log(`${state.code}: value=${state.value}, norm=${normalizedValue.toFixed(2)}, color=${color}`);\n            }\n          } else {\n            colorData[state.code] = {\n              color: '#D3D3D3',\n              value: null\n            }; // Gray for no data\n          }\n        });\n        setAllStatesData(stateData);\n        setStateColors(colorData);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching regional data:', err);\n        setError(`Failed to load regional data: ${err.message}`);\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [selectedIndicator]);\n\n  // Handle indicator change\n  const handleIndicatorChange = e => {\n    setSelectedIndicator(e.target.value);\n  };\n\n  // Format value based on indicator type\n  const formatValue = (value, indicator) => {\n    if (value === null || value === undefined) return 'No data available';\n    switch (indicator) {\n      case 'UNRATE':\n        return `${value.toFixed(1)}%`;\n      case 'MSPUS':\n        return `$${value.toLocaleString()}.00`;\n      case 'PCPI':\n        return `$${value.toLocaleString()}.00`;\n      default:\n        return value.toLocaleString();\n    }\n  };\n\n  // Get indicator friendly name\n  const getIndicatorName = indicator => {\n    const ind = indicators.find(i => i.id === indicator);\n    return ind ? ind.name : indicator;\n  };\n\n  // Show hovered state info\n  const renderStateInfo = () => {\n    if (!hoveredState || !allStatesData[hoveredState]) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"default-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Hover over a state to view details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Currently displaying: \", getIndicatorName(selectedIndicator)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this);\n    }\n    const state = allStatesData[hoveredState];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"state-details\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: state.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"state-metric\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: getIndicatorName(selectedIndicator)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"metric-value\",\n          children: formatValue(state.value, selectedIndicator)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"metric-date\",\n          children: [\"As of \", state.date || 'N/A']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"economic-overview\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Economic Overview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: state.overview || `${state.name}'s ${selectedIndicator === 'UNRATE' ? 'unemployment rate' : selectedIndicator === 'MSPUS' ? 'housing market' : 'personal income'} \n              shows ${state.value !== null ? selectedIndicator === 'UNRATE' ? state.value < 4 ? 'strong performance' : state.value < 6 ? 'moderate performance' : 'challenges' : selectedIndicator === 'MSPUS' ? state.value > 400000 ? 'high prices' : 'moderate prices' : state.value > 60000 ? 'high income levels' : 'moderate income levels' : 'no data available'}.`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Helper function to debug state codes\n  const debugStates = geographies => {\n    if (!geographies || geographies.length === 0) return;\n    console.log(\"First 5 state codes from GeoJSON:\");\n    for (let i = 0; i < Math.min(5, geographies.length); i++) {\n      console.log(`State ${i + 1}: ${geographies[i].properties.STUSPS} (${geographies[i].properties.name})`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"regional-data indicator-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Regional Economic Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"indicator-select\",\n          children: \"Select Indicator: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"indicator-select\",\n          value: selectedIndicator,\n          onChange: handleIndicatorChange,\n          children: indicators.map(indicator => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: indicator.id,\n            children: indicator.name\n          }, indicator.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading regional data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"regional-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-and-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"us-map-container\",\n          children: /*#__PURE__*/_jsxDEV(ComposableMap, {\n            projection: \"geoAlbersUsa\",\n            children: /*#__PURE__*/_jsxDEV(Geographies, {\n              geography: geoUrl,\n              children: ({\n                geographies\n              }) => {\n                // Debug the first few states\n                if (geographies && geographies.length > 0 && !window.debuggedStates) {\n                  debugStates(geographies);\n                  window.debuggedStates = true;\n                }\n                return geographies.map(geo => {\n                  // Get the state code - should be a 2-letter code like 'CA', 'TX', etc.\n                  const stateCode = geo.properties.STUSPS;\n\n                  // Get the color for this state\n                  const stateColor = stateColors[stateCode] ? stateColors[stateCode].color : '#D3D3D3'; // Default gray for no data\n\n                  return /*#__PURE__*/_jsxDEV(Geography, {\n                    geography: geo,\n                    fill: stateColor,\n                    stroke: \"#FFFFFF\",\n                    strokeWidth: 0.5,\n                    style: {\n                      default: {\n                        outline: \"none\"\n                      },\n                      hover: {\n                        outline: \"none\",\n                        stroke: \"#333\",\n                        strokeWidth: 1.5\n                      },\n                      pressed: {\n                        outline: \"none\"\n                      }\n                    },\n                    onMouseEnter: () => {\n                      setHoveredState(stateCode);\n                    },\n                    onMouseLeave: () => {\n                      setHoveredState(null);\n                    }\n                  }, geo.rsmKey, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 243,\n                    columnNumber: 25\n                  }, this);\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"state-info-panel\",\n          children: renderStateInfo()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Legend\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [selectedIndicator === 'UNRATE' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"legend-color\",\n              style: {\n                background: 'rgb(0, 255, 0)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Low Unemployment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"legend-color\",\n              style: {\n                background: 'rgb(255, 0, 0)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"High Unemployment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"legend-color\",\n              style: {\n                background: 'rgb(0, 255, 0)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"High \", selectedIndicator === 'MSPUS' ? 'House Prices' : 'Income']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"legend-color\",\n              style: {\n                background: 'rgb(255, 0, 0)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Low \", selectedIndicator === 'MSPUS' ? 'House Prices' : 'Income']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-color\",\n            style: {\n              background: '#D3D3D3'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"No Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n};\n_s(RegionalData, \"im65ye3mr12PBvQKlKXaVFyrJoU=\");\n_c = RegionalData;\nexport default RegionalData;\nvar _c;\n$RefreshReg$(_c, \"RegionalData\");","map":{"version":3,"names":["React","useState","useEffect","axios","ComposableMap","Geographies","Geography","jsxDEV","_jsxDEV","Fragment","_Fragment","geoUrl","RegionalData","_s","loading","setLoading","error","setError","hoveredState","setHoveredState","selectedIndicator","setSelectedIndicator","stateColors","setStateColors","allStatesData","setAllStatesData","indicators","id","name","fetchData","console","log","response","get","data","stateData","colorData","states","length","Error","values","filter","state","value","undefined","map","minValue","Math","min","maxValue","max","valueRange","forEach","code","normalizedValue","color","r","floor","g","toFixed","err","message","handleIndicatorChange","e","target","formatValue","indicator","toLocaleString","getIndicatorName","ind","find","i","renderStateInfo","className","children","fileName","_jsxFileName","lineNumber","columnNumber","date","overview","debugStates","geographies","properties","STUSPS","htmlFor","onChange","projection","geography","window","debuggedStates","geo","stateCode","stateColor","fill","stroke","strokeWidth","style","default","outline","hover","pressed","onMouseEnter","onMouseLeave","rsmKey","background","_c","$RefreshReg$"],"sources":["/home/tazmak/Desktop/2024_Code/py-Projects/FRED-tracker/Federal-Reserve-Economy-Tracker/frontend/src/components/indicators/RegionalData.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\n\n// United States GeoJSON - using a reliable source\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\n/**\n * RegionalData component for displaying economic data by state on an interactive map\n */\nconst RegionalData = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [hoveredState, setHoveredState] = useState(null);\n  const [selectedIndicator, setSelectedIndicator] = useState('MSPUS'); // Default to Median House Price\n  const [stateColors, setStateColors] = useState({});\n  const [allStatesData, setAllStatesData] = useState({});\n\n  // Available indicators\n  const indicators = [\n    { id: 'UNRATE', name: 'Unemployment Rate' },\n    { id: 'MSPUS', name: 'Median House Price' },\n    { id: 'PCPI', name: 'Per Capita Personal Income' }\n  ];\n\n  // Fetch data for all states\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        \n        // For debugging - log the API URL\n        console.log(`Fetching data from: /api/regional/${selectedIndicator}`);\n        \n        const response = await axios.get(`/api/regional/${selectedIndicator}`);\n        \n        // Debug: Log the API response\n        console.log(\"API Response:\", response.data);\n        \n        // Process data for map coloring\n        const stateData = {};\n        const colorData = {};\n        \n        // Check if we have valid state data\n        if (!response.data.states || response.data.states.length === 0) {\n          throw new Error(\"No state data received from API\");\n        }\n        \n        // Get min/max values for normalization\n        const values = response.data.states\n          .filter(state => state.value !== null && state.value !== undefined)\n          .map(state => state.value);\n        \n        if (values.length === 0) {\n          throw new Error(\"No valid values found in state data\");\n        }\n        \n        const minValue = Math.min(...values);\n        const maxValue = Math.max(...values);\n        const valueRange = maxValue - minValue;\n        \n        console.log(\"Value range:\", minValue, \"to\", maxValue);\n        \n        // Process each state\n        response.data.states.forEach(state => {\n          // Store the state data\n          stateData[state.code] = state;\n          \n          // Calculate color\n          if (state.value !== null && state.value !== undefined) {\n            // Normalize value between 0 and 1\n            const normalizedValue = valueRange > 0 \n              ? (state.value - minValue) / valueRange \n              : 0.5; // Default to middle value if range is 0\n            \n            // Generate color based on indicator\n            let color;\n            if (selectedIndicator === 'UNRATE') {\n              // For unemployment, red is high (bad), green is low (good)\n              const r = Math.floor(normalizedValue * 255);\n              const g = Math.floor((1 - normalizedValue) * 255);\n              color = `rgb(${r}, ${g}, 0)`;\n            } else {\n              // For income/housing prices, green is high (good), red is low (bad)\n              const r = Math.floor((1 - normalizedValue) * 255);\n              const g = Math.floor(normalizedValue * 255);\n              color = `rgb(${r}, ${g}, 0)`;\n            }\n            \n            colorData[state.code] = { color, value: state.value };\n            \n            // Debug: Log a few states and their colors\n            if (state.code === 'CA' || state.code === 'TX' || state.code === 'NY') {\n              console.log(`${state.code}: value=${state.value}, norm=${normalizedValue.toFixed(2)}, color=${color}`);\n            }\n          } else {\n            colorData[state.code] = { color: '#D3D3D3', value: null }; // Gray for no data\n          }\n        });\n        \n        setAllStatesData(stateData);\n        setStateColors(colorData);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching regional data:', err);\n        setError(`Failed to load regional data: ${err.message}`);\n        setLoading(false);\n      }\n    };\n    \n    fetchData();\n  }, [selectedIndicator]);\n\n  // Handle indicator change\n  const handleIndicatorChange = (e) => {\n    setSelectedIndicator(e.target.value);\n  };\n\n  // Format value based on indicator type\n  const formatValue = (value, indicator) => {\n    if (value === null || value === undefined) return 'No data available';\n    \n    switch (indicator) {\n      case 'UNRATE':\n        return `${value.toFixed(1)}%`;\n      case 'MSPUS':\n        return `$${value.toLocaleString()}.00`;\n      case 'PCPI':\n        return `$${value.toLocaleString()}.00`;\n      default:\n        return value.toLocaleString();\n    }\n  };\n\n  // Get indicator friendly name\n  const getIndicatorName = (indicator) => {\n    const ind = indicators.find(i => i.id === indicator);\n    return ind ? ind.name : indicator;\n  };\n  \n  // Show hovered state info\n  const renderStateInfo = () => {\n    if (!hoveredState || !allStatesData[hoveredState]) {\n      return (\n        <div className=\"default-info\">\n          <h3>Hover over a state to view details</h3>\n          <p>Currently displaying: {getIndicatorName(selectedIndicator)}</p>\n        </div>\n      );\n    }\n    \n    const state = allStatesData[hoveredState];\n    \n    return (\n      <div className=\"state-details\">\n        <h3>{state.name}</h3>\n        <div className=\"state-metric\">\n          <h4>{getIndicatorName(selectedIndicator)}</h4>\n          <div className=\"metric-value\">\n            {formatValue(state.value, selectedIndicator)}\n          </div>\n          <div className=\"metric-date\">\n            As of {state.date || 'N/A'}\n          </div>\n        </div>\n        <div className=\"economic-overview\">\n          <h4>Economic Overview</h4>\n          <p>\n            {state.overview || \n              `${state.name}'s ${selectedIndicator === 'UNRATE' ? 'unemployment rate' : \n                selectedIndicator === 'MSPUS' ? 'housing market' : 'personal income'} \n              shows ${state.value !== null ? \n                selectedIndicator === 'UNRATE' ? \n                  state.value < 4 ? 'strong performance' : \n                  state.value < 6 ? 'moderate performance' : 'challenges' : \n                selectedIndicator === 'MSPUS' ? \n                  state.value > 400000 ? 'high prices' : 'moderate prices' : \n                  state.value > 60000 ? 'high income levels' : 'moderate income levels' \n                : 'no data available'}.`}\n          </p>\n        </div>\n      </div>\n    );\n  };\n\n  // Helper function to debug state codes\n  const debugStates = (geographies) => {\n    if (!geographies || geographies.length === 0) return;\n    console.log(\"First 5 state codes from GeoJSON:\");\n    for (let i = 0; i < Math.min(5, geographies.length); i++) {\n      console.log(`State ${i+1}: ${geographies[i].properties.STUSPS} (${geographies[i].properties.name})`);\n    }\n  };\n\n  return (\n    <div className=\"regional-data indicator-page\">\n      <h2>Regional Economic Data</h2>\n      \n      <div className=\"controls\">\n        <div className=\"selector\">\n          <label htmlFor=\"indicator-select\">Select Indicator: </label>\n          <select \n            id=\"indicator-select\" \n            value={selectedIndicator} \n            onChange={handleIndicatorChange}\n          >\n            {indicators.map(indicator => (\n              <option key={indicator.id} value={indicator.id}>\n                {indicator.name}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n      \n      {loading ? (\n        <div className=\"loading\">Loading regional data...</div>\n      ) : error ? (\n        <div className=\"error\">{error}</div>\n      ) : (\n        <div className=\"regional-content\">\n          <div className=\"map-and-details\">\n            <div className=\"us-map-container\">\n              <ComposableMap projection=\"geoAlbersUsa\">\n                <Geographies geography={geoUrl}>\n                  {({ geographies }) => {\n                    // Debug the first few states\n                    if (geographies && geographies.length > 0 && !window.debuggedStates) {\n                      debugStates(geographies);\n                      window.debuggedStates = true;\n                    }\n                    \n                    return geographies.map(geo => {\n                      // Get the state code - should be a 2-letter code like 'CA', 'TX', etc.\n                      const stateCode = geo.properties.STUSPS;\n                      \n                      // Get the color for this state\n                      const stateColor = stateColors[stateCode] \n                        ? stateColors[stateCode].color \n                        : '#D3D3D3'; // Default gray for no data\n                      \n                      return (\n                        <Geography\n                          key={geo.rsmKey}\n                          geography={geo}\n                          fill={stateColor}\n                          stroke=\"#FFFFFF\"\n                          strokeWidth={0.5}\n                          style={{\n                            default: { outline: \"none\" },\n                            hover: { \n                              outline: \"none\", \n                              stroke: \"#333\",\n                              strokeWidth: 1.5\n                            },\n                            pressed: { outline: \"none\" },\n                          }}\n                          onMouseEnter={() => {\n                            setHoveredState(stateCode);\n                          }}\n                          onMouseLeave={() => {\n                            setHoveredState(null);\n                          }}\n                        />\n                      );\n                    });\n                  }}\n                </Geographies>\n              </ComposableMap>\n            </div>\n            <div className=\"state-info-panel\">\n              {renderStateInfo()}\n            </div>\n          </div>\n          \n          <div className=\"legend\">\n            <h3>Legend</h3>\n            <div className=\"legend-item\">\n              {selectedIndicator === 'UNRATE' ? (\n                <>\n                  <div className=\"legend-color\" style={{ background: 'rgb(0, 255, 0)' }}></div>\n                  <span>Low Unemployment</span>\n                  <div className=\"legend-color\" style={{ background: 'rgb(255, 0, 0)' }}></div>\n                  <span>High Unemployment</span>\n                </>\n              ) : (\n                <>\n                  <div className=\"legend-color\" style={{ background: 'rgb(0, 255, 0)' }}></div>\n                  <span>High {selectedIndicator === 'MSPUS' ? 'House Prices' : 'Income'}</span>\n                  <div className=\"legend-color\" style={{ background: 'rgb(255, 0, 0)' }}></div>\n                  <span>Low {selectedIndicator === 'MSPUS' ? 'House Prices' : 'Income'}</span>\n                </>\n              )}\n              <div className=\"legend-color\" style={{ background: '#D3D3D3' }}></div>\n              <span>No Data</span>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default RegionalData;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}