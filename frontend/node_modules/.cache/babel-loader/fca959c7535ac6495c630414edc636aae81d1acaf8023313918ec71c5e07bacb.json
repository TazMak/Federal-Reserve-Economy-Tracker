{"ast":null,"code":"var _jsxFileName = \"/home/tazmak/Desktop/2024_Code/py-Projects/FRED-tracker/Federal-Reserve-Economy-Tracker/frontend/src/components/indicators/EconomicForecasts.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport LineChart from '../charts/LineChart';\nimport { getDateRange } from '../../utils/dateUtils';\nimport { formatPercentage } from '../../utils/formatUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EconomicForecasts = () => {\n  _s();\n  var _forecastData$forecas, _forecastData$forecas2, _forecastData$forecas3;\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [forecastData, setForecastData] = useState({});\n  const [selectedIndicator, setSelectedIndicator] = useState('gdp');\n  const [selectedInstitution, setSelectedInstitution] = useState('all');\n\n  // Forecast indicators\n  const indicators = [{\n    id: 'gdp',\n    name: 'GDP Growth'\n  }, {\n    id: 'inflation',\n    name: 'Inflation Rate'\n  }, {\n    id: 'unemployment',\n    name: 'Unemployment Rate'\n  }, {\n    id: 'interest',\n    name: 'Federal Funds Rate'\n  }];\n\n  // Forecasting institutions\n  const institutions = [{\n    id: 'all',\n    name: 'All Institutions'\n  }, {\n    id: 'fed',\n    name: 'Federal Reserve'\n  }, {\n    id: 'imf',\n    name: 'IMF'\n  }, {\n    id: 'cbo',\n    name: 'Congressional Budget Office'\n  }, {\n    id: 'oecd',\n    name: 'OECD'\n  }];\n  useEffect(() => {\n    const fetchForecastData = async () => {\n      try {\n        setLoading(true);\n\n        // In a real application, you would fetch from your API\n        // For now, we'll simulate forecast data\n        const response = await axios.get(`/api/forecasts/${selectedIndicator}`);\n        setForecastData(response.data);\n      } catch (err) {\n        console.error(`Error fetching forecast data:`, err);\n        // Generate simulated data for demo purposes\n        const simulatedData = generateSimulatedForecastData();\n        setForecastData(simulatedData);\n        setError(null); // Clear error since we're using simulated data\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchForecastData();\n  }, [selectedIndicator]);\n\n  // Generate simulated forecast data for demo purposes\n  const generateSimulatedForecastData = () => {\n    const currentYear = new Date().getFullYear();\n    const years = [currentYear, currentYear + 1, currentYear + 2];\n\n    // Different base values and variations for each indicator\n    let baseValue, variance;\n    switch (selectedIndicator) {\n      case 'gdp':\n        baseValue = 2.0;\n        variance = 1.0;\n        break;\n      case 'inflation':\n        baseValue = 3.0;\n        variance = 1.2;\n        break;\n      case 'unemployment':\n        baseValue = 4.5;\n        variance = 0.7;\n        break;\n      case 'interest':\n        baseValue = 5.25;\n        variance = 0.5;\n        break;\n      default:\n        baseValue = 2.0;\n        variance = 1.0;\n    }\n\n    // Generate forecasts for each institution\n    const institutions = ['fed', 'imf', 'cbo', 'oecd'];\n    const forecasts = {};\n    institutions.forEach(institution => {\n      // Each institution has slightly different forecasts\n      const institutionVariance = Math.random() * 0.5;\n      forecasts[institution] = years.map(year => {\n        // Each year progresses from the previous with some random variation\n        const yearIndex = year - currentYear;\n        const randomFactor = (Math.random() - 0.5) * variance;\n        let value = baseValue + randomFactor + yearIndex * institutionVariance;\n\n        // Ensure values make sense (no negative unemployment, etc.)\n        if (selectedIndicator === 'unemployment' && value < 2) value = 2;\n        if (selectedIndicator === 'interest' && value < 0) value = 0;\n        return {\n          year: year.toString(),\n          value: parseFloat(value.toFixed(1))\n        };\n      });\n    });\n\n    // Calculate consensus (average) forecast\n    const consensus = years.map(year => {\n      const yearForecasts = institutions.map(inst => forecasts[inst].find(f => f.year === year.toString()).value);\n      const avgValue = yearForecasts.reduce((sum, val) => sum + val, 0) / yearForecasts.length;\n      return {\n        year: year.toString(),\n        value: parseFloat(avgValue.toFixed(1))\n      };\n    });\n    forecasts.consensus = consensus;\n    return {\n      indicator: selectedIndicator,\n      title: indicators.find(ind => ind.id === selectedIndicator).name,\n      units: selectedIndicator === 'gdp' || selectedIndicator === 'inflation' ? '%' : selectedIndicator === 'unemployment' ? '%' : '%',\n      forecasts: forecasts\n    };\n  };\n  const handleIndicatorChange = event => {\n    setSelectedIndicator(event.target.value);\n  };\n  const handleInstitutionChange = event => {\n    setSelectedInstitution(event.target.value);\n  };\n\n  // Format data for chart display\n  const prepareChartData = () => {\n    if (!forecastData.forecasts) return [];\n    const currentYear = new Date().getFullYear();\n\n    // First add historical data (simulated)\n    const chartData = [{\n      date: `${currentYear - 3}-12-31`,\n      value: getHistoricalValue(currentYear - 3)\n    }, {\n      date: `${currentYear - 2}-12-31`,\n      value: getHistoricalValue(currentYear - 2)\n    }, {\n      date: `${currentYear - 1}-12-31`,\n      value: getHistoricalValue(currentYear - 1)\n    }, {\n      date: `${currentYear}-06-30`,\n      value: getHistoricalValue(currentYear)\n    }];\n\n    // Add forecast data based on selected institution\n    if (selectedInstitution === 'all') {\n      // Add consensus forecast\n      forecastData.forecasts.consensus.forEach(item => {\n        chartData.push({\n          date: `${item.year}-12-31`,\n          value: item.value\n        });\n      });\n    } else {\n      // Add selected institution's forecast\n      if (forecastData.forecasts[selectedInstitution]) {\n        forecastData.forecasts[selectedInstitution].forEach(item => {\n          chartData.push({\n            date: `${item.year}-12-31`,\n            value: item.value\n          });\n        });\n      }\n    }\n    return chartData;\n  };\n\n  // Generate plausible historical values\n  const getHistoricalValue = year => {\n    const randomFactor = Math.random() * 0.5;\n    switch (selectedIndicator) {\n      case 'gdp':\n        return year === 2020 ? -3.4 + randomFactor : 2.0 + randomFactor;\n      // 2020 COVID recession\n      case 'inflation':\n        return year >= 2021 ? 4.5 + randomFactor : 1.8 + randomFactor;\n      // Recent inflation spike\n      case 'unemployment':\n        return year === 2020 ? 8.1 + randomFactor : 4.0 + randomFactor;\n      // 2020 COVID spike\n      case 'interest':\n        return year <= 2021 ? 0.25 + randomFactor : 4.0 + randomFactor;\n      // Recent rate hikes\n      default:\n        return 2.0 + randomFactor;\n    }\n  };\n  const getForecastTitle = () => {\n    var _indicators$find, _institutions$find;\n    const indicatorName = ((_indicators$find = indicators.find(ind => ind.id === selectedIndicator)) === null || _indicators$find === void 0 ? void 0 : _indicators$find.name) || '';\n    const institutionName = ((_institutions$find = institutions.find(inst => inst.id === selectedInstitution)) === null || _institutions$find === void 0 ? void 0 : _institutions$find.name) || '';\n    return `${indicatorName} Forecast ${institutionName !== 'All Institutions' ? `(${institutionName})` : ''}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"indicator-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Economic Forecasts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"indicator-select\",\n          children: \"Select Indicator: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"indicator-select\",\n          value: selectedIndicator,\n          onChange: handleIndicatorChange,\n          children: indicators.map(indicator => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: indicator.id,\n            children: indicator.name\n          }, indicator.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"institution-select\",\n          children: \"Forecasting Institution: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"institution-select\",\n          value: selectedInstitution,\n          onChange: handleInstitutionChange,\n          children: institutions.map(institution => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: institution.id,\n            children: institution.name\n          }, institution.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading forecast data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"indicator-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"indicator-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: getForecastTitle()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: prepareChartData(),\n          xKey: \"date\",\n          yKey: \"value\",\n          color: \"#6a0dad\" // Purple for forecasts\n          ,\n          title: getForecastTitle(),\n          tooltipFormatter: value => `${value}%`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast-comparison\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Forecast Comparison\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"forecast-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Institution\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 19\n              }, this), (_forecastData$forecas = forecastData.forecasts) === null || _forecastData$forecas === void 0 ? void 0 : (_forecastData$forecas2 = _forecastData$forecas.consensus) === null || _forecastData$forecas2 === void 0 ? void 0 : _forecastData$forecas2.map(item => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: item.year\n              }, item.year, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: [forecastData.forecasts && Object.entries(forecastData.forecasts).filter(([institution]) => institution !== 'consensus').map(([institution, data]) => {\n              var _institutions$find2;\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: ((_institutions$find2 = institutions.find(inst => inst.id === institution)) === null || _institutions$find2 === void 0 ? void 0 : _institutions$find2.name) || institution\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 279,\n                  columnNumber: 23\n                }, this), data.map(item => /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [item.value, \"%\"]\n                }, item.year, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 281,\n                  columnNumber: 25\n                }, this))]\n              }, institution, true, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 21\n              }, this);\n            }), ((_forecastData$forecas3 = forecastData.forecasts) === null || _forecastData$forecas3 === void 0 ? void 0 : _forecastData$forecas3.consensus) && /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"consensus-row\",\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Consensus\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 289,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 21\n              }, this), forecastData.forecasts.consensus.map(item => /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [item.value, \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 291,\n                  columnNumber: 43\n                }, this)\n              }, item.year, false, {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 23\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"indicator-description\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"About these forecasts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [selectedIndicator === 'gdp' && 'GDP growth forecasts represent the anticipated annual percentage change in real Gross Domestic Product. These forecasts take into account factors such as consumer spending, business investment, government expenditure, and net exports.', selectedIndicator === 'inflation' && 'Inflation forecasts represent the projected annual percentage change in consumer prices. The Federal Reserve targets an average inflation rate of 2% over time, considering this level consistent with their dual mandate of maximum employment and price stability.', selectedIndicator === 'unemployment' && 'Unemployment rate forecasts represent the projected percentage of the labor force that will be unemployed. The natural rate of unemployment (which accounts for frictional and structural unemployment) is typically estimated to be between 3.5% and 5.5%.', selectedIndicator === 'interest' && 'Federal Funds Rate forecasts represent projections for the target range set by the Federal Open Market Committee (FOMC). This rate influences other interest rates throughout the economy and is a key tool for monetary policy.']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"forecast-disclaimer\",\n          children: /*#__PURE__*/_jsxDEV(\"em\", {\n            children: \"Note: Economic forecasts are subject to uncertainty and may change as new data becomes available. The data shown here represents projections from various institutions and should not be interpreted as definitive predictions.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n};\n_s(EconomicForecasts, \"hfGyM0SBWw9UksVgBIHzG6VdGbc=\");\n_c = EconomicForecasts;\nexport default EconomicForecasts;\nvar _c;\n$RefreshReg$(_c, \"EconomicForecasts\");","map":{"version":3,"names":["React","useState","useEffect","axios","LineChart","getDateRange","formatPercentage","jsxDEV","_jsxDEV","EconomicForecasts","_s","_forecastData$forecas","_forecastData$forecas2","_forecastData$forecas3","loading","setLoading","error","setError","forecastData","setForecastData","selectedIndicator","setSelectedIndicator","selectedInstitution","setSelectedInstitution","indicators","id","name","institutions","fetchForecastData","response","get","data","err","console","simulatedData","generateSimulatedForecastData","currentYear","Date","getFullYear","years","baseValue","variance","forecasts","forEach","institution","institutionVariance","Math","random","map","year","yearIndex","randomFactor","value","toString","parseFloat","toFixed","consensus","yearForecasts","inst","find","f","avgValue","reduce","sum","val","length","indicator","title","ind","units","handleIndicatorChange","event","target","handleInstitutionChange","prepareChartData","chartData","date","getHistoricalValue","item","push","getForecastTitle","_indicators$find","_institutions$find","indicatorName","institutionName","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","onChange","xKey","yKey","color","tooltipFormatter","Object","entries","filter","_institutions$find2","_c","$RefreshReg$"],"sources":["/home/tazmak/Desktop/2024_Code/py-Projects/FRED-tracker/Federal-Reserve-Economy-Tracker/frontend/src/components/indicators/EconomicForecasts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport LineChart from '../charts/LineChart';\nimport { getDateRange } from '../../utils/dateUtils';\nimport { formatPercentage } from '../../utils/formatUtils';\n\nconst EconomicForecasts = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [forecastData, setForecastData] = useState({});\n  const [selectedIndicator, setSelectedIndicator] = useState('gdp');\n  const [selectedInstitution, setSelectedInstitution] = useState('all');\n\n  // Forecast indicators\n  const indicators = [\n    { id: 'gdp', name: 'GDP Growth' },\n    { id: 'inflation', name: 'Inflation Rate' },\n    { id: 'unemployment', name: 'Unemployment Rate' },\n    { id: 'interest', name: 'Federal Funds Rate' }\n  ];\n\n  // Forecasting institutions\n  const institutions = [\n    { id: 'all', name: 'All Institutions' },\n    { id: 'fed', name: 'Federal Reserve' },\n    { id: 'imf', name: 'IMF' },\n    { id: 'cbo', name: 'Congressional Budget Office' },\n    { id: 'oecd', name: 'OECD' }\n  ];\n\n  useEffect(() => {\n    const fetchForecastData = async () => {\n      try {\n        setLoading(true);\n        \n        // In a real application, you would fetch from your API\n        // For now, we'll simulate forecast data\n        const response = await axios.get(`/api/forecasts/${selectedIndicator}`);\n        setForecastData(response.data);\n        \n      } catch (err) {\n        console.error(`Error fetching forecast data:`, err);\n        // Generate simulated data for demo purposes\n        const simulatedData = generateSimulatedForecastData();\n        setForecastData(simulatedData);\n        setError(null); // Clear error since we're using simulated data\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchForecastData();\n  }, [selectedIndicator]);\n\n  // Generate simulated forecast data for demo purposes\n  const generateSimulatedForecastData = () => {\n    const currentYear = new Date().getFullYear();\n    const years = [currentYear, currentYear + 1, currentYear + 2];\n    \n    // Different base values and variations for each indicator\n    let baseValue, variance;\n    \n    switch(selectedIndicator) {\n      case 'gdp':\n        baseValue = 2.0;\n        variance = 1.0;\n        break;\n      case 'inflation':\n        baseValue = 3.0;\n        variance = 1.2;\n        break;\n      case 'unemployment':\n        baseValue = 4.5;\n        variance = 0.7;\n        break;\n      case 'interest':\n        baseValue = 5.25;\n        variance = 0.5;\n        break;\n      default:\n        baseValue = 2.0;\n        variance = 1.0;\n    }\n    \n    // Generate forecasts for each institution\n    const institutions = ['fed', 'imf', 'cbo', 'oecd'];\n    const forecasts = {};\n    \n    institutions.forEach(institution => {\n      // Each institution has slightly different forecasts\n      const institutionVariance = Math.random() * 0.5;\n      \n      forecasts[institution] = years.map(year => {\n        // Each year progresses from the previous with some random variation\n        const yearIndex = year - currentYear;\n        const randomFactor = (Math.random() - 0.5) * variance;\n        let value = baseValue + randomFactor + (yearIndex * institutionVariance);\n        \n        // Ensure values make sense (no negative unemployment, etc.)\n        if (selectedIndicator === 'unemployment' && value < 2) value = 2;\n        if (selectedIndicator === 'interest' && value < 0) value = 0;\n        \n        return {\n          year: year.toString(),\n          value: parseFloat(value.toFixed(1))\n        };\n      });\n    });\n    \n    // Calculate consensus (average) forecast\n    const consensus = years.map(year => {\n      const yearForecasts = institutions.map(inst => \n        forecasts[inst].find(f => f.year === year.toString()).value\n      );\n      \n      const avgValue = yearForecasts.reduce((sum, val) => sum + val, 0) / yearForecasts.length;\n      \n      return {\n        year: year.toString(),\n        value: parseFloat(avgValue.toFixed(1))\n      };\n    });\n    \n    forecasts.consensus = consensus;\n    \n    return {\n      indicator: selectedIndicator,\n      title: indicators.find(ind => ind.id === selectedIndicator).name,\n      units: selectedIndicator === 'gdp' || selectedIndicator === 'inflation' ? '%' : \n             selectedIndicator === 'unemployment' ? '%' : '%',\n      forecasts: forecasts\n    };\n  };\n\n  const handleIndicatorChange = (event) => {\n    setSelectedIndicator(event.target.value);\n  };\n\n  const handleInstitutionChange = (event) => {\n    setSelectedInstitution(event.target.value);\n  };\n\n  // Format data for chart display\n  const prepareChartData = () => {\n    if (!forecastData.forecasts) return [];\n    \n    const currentYear = new Date().getFullYear();\n    \n    // First add historical data (simulated)\n    const chartData = [\n      { date: `${currentYear-3}-12-31`, value: getHistoricalValue(currentYear-3) },\n      { date: `${currentYear-2}-12-31`, value: getHistoricalValue(currentYear-2) },\n      { date: `${currentYear-1}-12-31`, value: getHistoricalValue(currentYear-1) },\n      { date: `${currentYear}-06-30`, value: getHistoricalValue(currentYear) }\n    ];\n    \n    // Add forecast data based on selected institution\n    if (selectedInstitution === 'all') {\n      // Add consensus forecast\n      forecastData.forecasts.consensus.forEach(item => {\n        chartData.push({\n          date: `${item.year}-12-31`,\n          value: item.value\n        });\n      });\n    } else {\n      // Add selected institution's forecast\n      if (forecastData.forecasts[selectedInstitution]) {\n        forecastData.forecasts[selectedInstitution].forEach(item => {\n          chartData.push({\n            date: `${item.year}-12-31`,\n            value: item.value\n          });\n        });\n      }\n    }\n    \n    return chartData;\n  };\n  \n  // Generate plausible historical values\n  const getHistoricalValue = (year) => {\n    const randomFactor = Math.random() * 0.5;\n    \n    switch(selectedIndicator) {\n      case 'gdp':\n        return year === 2020 ? -3.4 + randomFactor : 2.0 + randomFactor; // 2020 COVID recession\n      case 'inflation':\n        return year >= 2021 ? 4.5 + randomFactor : 1.8 + randomFactor; // Recent inflation spike\n      case 'unemployment':\n        return year === 2020 ? 8.1 + randomFactor : 4.0 + randomFactor; // 2020 COVID spike\n      case 'interest':\n        return year <= 2021 ? 0.25 + randomFactor : 4.0 + randomFactor; // Recent rate hikes\n      default:\n        return 2.0 + randomFactor;\n    }\n  };\n\n  const getForecastTitle = () => {\n    const indicatorName = indicators.find(ind => ind.id === selectedIndicator)?.name || '';\n    const institutionName = institutions.find(inst => inst.id === selectedInstitution)?.name || '';\n    \n    return `${indicatorName} Forecast ${institutionName !== 'All Institutions' ? `(${institutionName})` : ''}`;\n  };\n\n  return (\n    <div className=\"indicator-page\">\n      <h2>Economic Forecasts</h2>\n      \n      <div className=\"controls\">\n        <div className=\"selector\">\n          <label htmlFor=\"indicator-select\">Select Indicator: </label>\n          <select \n            id=\"indicator-select\" \n            value={selectedIndicator} \n            onChange={handleIndicatorChange}\n          >\n            {indicators.map(indicator => (\n              <option key={indicator.id} value={indicator.id}>\n                {indicator.name}\n              </option>\n            ))}\n          </select>\n        </div>\n        \n        <div className=\"selector\">\n          <label htmlFor=\"institution-select\">Forecasting Institution: </label>\n          <select \n            id=\"institution-select\" \n            value={selectedInstitution} \n            onChange={handleInstitutionChange}\n          >\n            {institutions.map(institution => (\n              <option key={institution.id} value={institution.id}>\n                {institution.name}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n      \n      {loading ? (\n        <div className=\"loading\">Loading forecast data...</div>\n      ) : error ? (\n        <div className=\"error\">{error}</div>\n      ) : (\n        <div className=\"indicator-content\">\n          <div className=\"indicator-header\">\n            <h3>{getForecastTitle()}</h3>\n          </div>\n          \n          <div className=\"chart-container\">\n            <LineChart \n              data={prepareChartData()} \n              xKey=\"date\"\n              yKey=\"value\"\n              color=\"#6a0dad\" // Purple for forecasts\n              title={getForecastTitle()}\n              tooltipFormatter={(value) => `${value}%`}\n            />\n          </div>\n          \n          <div className=\"forecast-comparison\">\n            <h4>Forecast Comparison</h4>\n            <table className=\"forecast-table\">\n              <thead>\n                <tr>\n                  <th>Institution</th>\n                  {forecastData.forecasts?.consensus?.map(item => (\n                    <th key={item.year}>{item.year}</th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody>\n                {forecastData.forecasts && Object.entries(forecastData.forecasts)\n                  .filter(([institution]) => institution !== 'consensus')\n                  .map(([institution, data]) => (\n                    <tr key={institution}>\n                      <td>{institutions.find(inst => inst.id === institution)?.name || institution}</td>\n                      {data.map(item => (\n                        <td key={item.year}>{item.value}%</td>\n                      ))}\n                    </tr>\n                  ))}\n                \n                {/* Add consensus forecast (average) as the last row */}\n                {forecastData.forecasts?.consensus && (\n                  <tr className=\"consensus-row\">\n                    <td><strong>Consensus</strong></td>\n                    {forecastData.forecasts.consensus.map(item => (\n                      <td key={item.year}><strong>{item.value}%</strong></td>\n                    ))}\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n          \n          <div className=\"indicator-description\">\n            <h4>About these forecasts</h4>\n            <p>\n              {selectedIndicator === 'gdp' && \n                'GDP growth forecasts represent the anticipated annual percentage change in real Gross Domestic Product. These forecasts take into account factors such as consumer spending, business investment, government expenditure, and net exports.'}\n              {selectedIndicator === 'inflation' && \n                'Inflation forecasts represent the projected annual percentage change in consumer prices. The Federal Reserve targets an average inflation rate of 2% over time, considering this level consistent with their dual mandate of maximum employment and price stability.'}\n              {selectedIndicator === 'unemployment' && \n                'Unemployment rate forecasts represent the projected percentage of the labor force that will be unemployed. The natural rate of unemployment (which accounts for frictional and structural unemployment) is typically estimated to be between 3.5% and 5.5%.'}\n              {selectedIndicator === 'interest' && \n                'Federal Funds Rate forecasts represent projections for the target range set by the Federal Open Market Committee (FOMC). This rate influences other interest rates throughout the economy and is a key tool for monetary policy.'}\n            </p>\n            <p className=\"forecast-disclaimer\">\n              <em>Note: Economic forecasts are subject to uncertainty and may change as new data becomes available. The data shown here represents projections from various institutions and should not be interpreted as definitive predictions.</em>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EconomicForecasts;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}