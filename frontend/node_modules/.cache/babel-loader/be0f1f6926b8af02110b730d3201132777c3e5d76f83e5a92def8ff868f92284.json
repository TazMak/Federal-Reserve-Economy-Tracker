{"ast":null,"code":"var _jsxFileName = \"/home/tazmak/Desktop/2024_Code/py-Projects/FRED-tracker/Federal-Reserve-Economy-Tracker/frontend/src/components/indicators/StateTrendComparison.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport axios from 'axios';\nimport { formatDate } from '../utils/dateUtils';\nimport { formatPercentage, formatCurrency } from '../utils/formatUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StateTrendComparison = ({\n  selectedIndicator = 'UNRATE'\n}) => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [trendData, setTrendData] = useState([]);\n  const [selectedStates, setSelectedStates] = useState(['CA', 'TX', 'NY', 'FL']);\n  const [availableStates, setAvailableStates] = useState([]);\n  const [timeRange, setTimeRange] = useState('5y');\n\n  // Define colors for each state\n  const stateColors = {\n    'CA': '#ff7f0e',\n    // Orange\n    'TX': '#2ca02c',\n    // Green\n    'NY': '#1f77b4',\n    // Blue\n    'FL': '#d62728',\n    // Red\n    'IL': '#9467bd',\n    // Purple\n    'PA': '#8c564b',\n    // Brown\n    'OH': '#e377c2',\n    // Pink\n    'GA': '#7f7f7f',\n    // Gray\n    'NC': '#bcbd22',\n    // Olive\n    'MI': '#17becf' // Cyan\n  };\n\n  // This would normally fetch real historical data from your API\n  // For demo purposes, we'll simulate it\n  useEffect(() => {\n    const fetchTrendData = async () => {\n      setLoading(true);\n      try {\n        // In a real implementation, you would call your API for historical data\n        // For example:\n        // const response = await axios.get(`/api/regional-trends/${selectedIndicator}?states=${selectedStates.join(',')}`);\n        // setTrendData(response.data);\n\n        // For demo, we'll generate some plausible trend data\n        const simulatedData = generateSimulatedTrendData(selectedStates, selectedIndicator, timeRange);\n        setTrendData(simulatedData);\n\n        // Also simulate a list of available states\n        const statesList = [{\n          code: 'AL',\n          name: 'Alabama'\n        }, {\n          code: 'AK',\n          name: 'Alaska'\n        }, {\n          code: 'AZ',\n          name: 'Arizona'\n        }, {\n          code: 'AR',\n          name: 'Arkansas'\n        }, {\n          code: 'CA',\n          name: 'California'\n        }, {\n          code: 'CO',\n          name: 'Colorado'\n        }, {\n          code: 'CT',\n          name: 'Connecticut'\n        }, {\n          code: 'DE',\n          name: 'Delaware'\n        }, {\n          code: 'FL',\n          name: 'Florida'\n        }, {\n          code: 'GA',\n          name: 'Georgia'\n        }, {\n          code: 'HI',\n          name: 'Hawaii'\n        }, {\n          code: 'ID',\n          name: 'Idaho'\n        }, {\n          code: 'IL',\n          name: 'Illinois'\n        }, {\n          code: 'IN',\n          name: 'Indiana'\n        }, {\n          code: 'IA',\n          name: 'Iowa'\n        }, {\n          code: 'KS',\n          name: 'Kansas'\n        }, {\n          code: 'KY',\n          name: 'Kentucky'\n        }, {\n          code: 'LA',\n          name: 'Louisiana'\n        }, {\n          code: 'ME',\n          name: 'Maine'\n        }, {\n          code: 'MD',\n          name: 'Maryland'\n        }, {\n          code: 'MA',\n          name: 'Massachusetts'\n        }, {\n          code: 'MI',\n          name: 'Michigan'\n        }, {\n          code: 'MN',\n          name: 'Minnesota'\n        }, {\n          code: 'MS',\n          name: 'Mississippi'\n        }, {\n          code: 'MO',\n          name: 'Missouri'\n        }, {\n          code: 'MT',\n          name: 'Montana'\n        }, {\n          code: 'NE',\n          name: 'Nebraska'\n        }, {\n          code: 'NV',\n          name: 'Nevada'\n        }, {\n          code: 'NH',\n          name: 'New Hampshire'\n        }, {\n          code: 'NJ',\n          name: 'New Jersey'\n        }, {\n          code: 'NM',\n          name: 'New Mexico'\n        }, {\n          code: 'NY',\n          name: 'New York'\n        }, {\n          code: 'NC',\n          name: 'North Carolina'\n        }, {\n          code: 'ND',\n          name: 'North Dakota'\n        }, {\n          code: 'OH',\n          name: 'Ohio'\n        }, {\n          code: 'OK',\n          name: 'Oklahoma'\n        }, {\n          code: 'OR',\n          name: 'Oregon'\n        }, {\n          code: 'PA',\n          name: 'Pennsylvania'\n        }, {\n          code: 'RI',\n          name: 'Rhode Island'\n        }, {\n          code: 'SC',\n          name: 'South Carolina'\n        }, {\n          code: 'SD',\n          name: 'South Dakota'\n        }, {\n          code: 'TN',\n          name: 'Tennessee'\n        }, {\n          code: 'TX',\n          name: 'Texas'\n        }, {\n          code: 'UT',\n          name: 'Utah'\n        }, {\n          code: 'VT',\n          name: 'Vermont'\n        }, {\n          code: 'VA',\n          name: 'Virginia'\n        }, {\n          code: 'WA',\n          name: 'Washington'\n        }, {\n          code: 'WV',\n          name: 'West Virginia'\n        }, {\n          code: 'WI',\n          name: 'Wisconsin'\n        }, {\n          code: 'WY',\n          name: 'Wyoming'\n        }];\n        setAvailableStates(statesList);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching trend data:', err);\n        setError('Failed to load trend data');\n        setLoading(false);\n      }\n    };\n    fetchTrendData();\n  }, [selectedIndicator, selectedStates, timeRange]);\n\n  // Helper function to generate simulated trend data\n  const generateSimulatedTrendData = (states, indicator, range) => {\n    const data = [];\n    const numPoints = range === '1y' ? 12 : range === '5y' ? 20 : 30;\n    const now = new Date();\n\n    // Base values for different indicators\n    const baseValues = {\n      'UNRATE': {\n        'CA': 4.2,\n        'TX': 3.8,\n        'NY': 4.5,\n        'FL': 3.2,\n        'IL': 4.7,\n        'PA': 4.1,\n        'OH': 4.3,\n        'GA': 3.6,\n        'NC': 3.9,\n        'MI': 4.8\n      },\n      'MSPUS': {\n        'CA': 650000,\n        'TX': 300000,\n        'NY': 550000,\n        'FL': 375000,\n        'IL': 275000,\n        'PA': 250000,\n        'OH': 220000,\n        'GA': 290000,\n        'NC': 310000,\n        'MI': 235000\n      },\n      'PCPI': {\n        'CA': 75000,\n        'TX': 55000,\n        'NY': 73000,\n        'FL': 58000,\n        'IL': 62000,\n        'PA': 60000,\n        'OH': 53000,\n        'GA': 56000,\n        'NC': 54000,\n        'MI': 52000\n      }\n    };\n\n    // Generate data points for each date\n    for (let i = 0; i < numPoints; i++) {\n      const date = new Date(now);\n      date.setMonth(date.getMonth() - (numPoints - i));\n      const point = {\n        date: date.toISOString().split('T')[0]\n      };\n\n      // Add value for each selected state\n      states.forEach(state => {\n        // Base value for this state and indicator\n        const baseValue = baseValues[indicator][state] || (indicator === 'UNRATE' ? 4.0 : indicator === 'MSPUS' ? 300000 : 55000);\n\n        // Add some random variation to create a realistic trend\n        let randomFactor = 0;\n        if (indicator === 'UNRATE') {\n          // Unemployment trends\n          if (i < numPoints / 3) {\n            randomFactor = Math.random() * 0.5 - 0.1; // Slightly increasing\n          } else if (i < numPoints * 2 / 3) {\n            randomFactor = Math.random() * 0.5 - 0.3; // Decreasing trend\n          } else {\n            randomFactor = Math.random() * 0.4 - 0.2; // Stabilizing\n          }\n        } else {\n          // Housing prices and income typically trend upward\n          if (i < numPoints / 2) {\n            randomFactor = Math.random() * 0.05; // Slow growth\n          } else {\n            randomFactor = Math.random() * 0.08; // Faster growth\n          }\n        }\n\n        // Calculate the value with trend and randomness\n        const trendFactor = 1 + i / numPoints * (indicator === 'UNRATE' ? -0.1 : 0.15);\n        const value = baseValue * trendFactor * (1 + randomFactor);\n\n        // Add to the data point with appropriate precision\n        if (indicator === 'UNRATE') {\n          point[state] = Math.max(2.5, Math.min(8.0, parseFloat(value.toFixed(1))));\n        } else if (indicator === 'MSPUS') {\n          point[state] = Math.round(value / 1000) * 1000; // Round to nearest thousand\n        } else {\n          point[state] = Math.round(value / 100) * 100; // Round to nearest hundred\n        }\n      });\n      data.push(point);\n    }\n    return data;\n  };\n\n  // Handle changing selected states\n  const handleStateChange = stateCode => {\n    if (selectedStates.includes(stateCode)) {\n      // Remove state if already selected\n      setSelectedStates(selectedStates.filter(code => code !== stateCode));\n    } else {\n      // Add state if not selected (limit to 5)\n      if (selectedStates.length < 5) {\n        setSelectedStates([...selectedStates, stateCode]);\n      }\n    }\n  };\n\n  // Handle time range change\n  const handleTimeRangeChange = range => {\n    setTimeRange(range);\n  };\n\n  // Format Y-axis tick values\n  const formatYAxisTick = value => {\n    if (selectedIndicator === 'UNRATE') {\n      return `${value}%`;\n    } else if (selectedIndicator === 'MSPUS') {\n      if (value >= 1000000) {\n        return `$${(value / 1000000).toFixed(1)}M`;\n      } else if (value >= 1000) {\n        return `$${(value / 1000).toFixed(0)}K`;\n      }\n      return `$${value}`;\n    } else if (selectedIndicator === 'PCPI') {\n      if (value >= 1000) {\n        return `$${(value / 1000).toFixed(0)}K`;\n      }\n      return `$${value}`;\n    }\n    return value;\n  };\n\n  // Custom tooltip for the chart\n  const CustomTooltip = ({\n    active,\n    payload,\n    label\n  }) => {\n    if (active && payload && payload.length) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-tooltip\",\n        style: {\n          backgroundColor: 'white',\n          padding: '10px',\n          border: '1px solid #ccc'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"label\",\n          style: {\n            margin: '0',\n            fontWeight: 'bold'\n          },\n          children: formatDate(label)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this), payload.map((entry, index) => {\n          var _availableStates$find;\n          const stateName = ((_availableStates$find = availableStates.find(state => state.code === entry.dataKey)) === null || _availableStates$find === void 0 ? void 0 : _availableStates$find.name) || entry.dataKey;\n          let formattedValue;\n          if (selectedIndicator === 'UNRATE') {\n            formattedValue = `${entry.value}%`;\n          } else if (selectedIndicator === 'MSPUS') {\n            formattedValue = `$${entry.value.toLocaleString()}`;\n          } else if (selectedIndicator === 'PCPI') {\n            formattedValue = `$${entry.value.toLocaleString()}`;\n          } else {\n            formattedValue = entry.value;\n          }\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              margin: '0',\n              color: entry.color\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontWeight: 'bold'\n              },\n              children: [stateName, \": \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: formattedValue\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 17\n            }, this)]\n          }, `item-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n\n  // Get chart title based on selected indicator\n  const getChartTitle = () => {\n    if (selectedIndicator === 'UNRATE') {\n      return 'Unemployment Rate Over Time';\n    } else if (selectedIndicator === 'MSPUS') {\n      return 'Median House Price Over Time';\n    } else if (selectedIndicator === 'PCPI') {\n      return 'Per Capita Personal Income Over Time';\n    }\n    return 'State Comparison Over Time';\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading trend data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"state-trend-comparison\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: getChartTitle()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"time-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Time Range: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: timeRange === '1y' ? 'active' : '',\n            onClick: () => handleTimeRangeChange('1y'),\n            children: \"1 Year\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: timeRange === '5y' ? 'active' : '',\n            onClick: () => handleTimeRangeChange('5y'),\n            children: \"5 Years\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: timeRange === '10y' ? 'active' : '',\n            onClick: () => handleTimeRangeChange('10y'),\n            children: \"10 Years\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"state-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"state-chips\",\n          children: availableStates.filter(state => Object.keys(stateColors).includes(state.code)).map(state => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `state-chip ${selectedStates.includes(state.code) ? 'selected' : ''}`,\n            style: {\n              backgroundColor: selectedStates.includes(state.code) ? stateColors[state.code] : '#f0f0f0',\n              color: selectedStates.includes(state.code) ? 'white' : '#333'\n            },\n            onClick: () => handleStateChange(state.code),\n            children: state.code\n          }, state.code, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"state-selection-help\",\n          children: /*#__PURE__*/_jsxDEV(\"small\", {\n            children: \"Click to add/remove states (max 5)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"trend-chart\",\n      style: {\n        height: '400px',\n        marginTop: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: \"100%\",\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: trendData,\n          margin: {\n            top: 20,\n            right: 30,\n            left: 30,\n            bottom: 10\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"date\",\n            tickFormatter: value => formatDate(value, 'MMM yyyy')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            tickFormatter: formatYAxisTick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            content: /*#__PURE__*/_jsxDEV(CustomTooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 31\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 13\n          }, this), selectedStates.map(state => {\n            var _availableStates$find2;\n            return /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: state,\n              name: ((_availableStates$find2 = availableStates.find(s => s.code === state)) === null || _availableStates$find2 === void 0 ? void 0 : _availableStates$find2.name) || state,\n              stroke: stateColors[state] || '#8884d8',\n              activeDot: {\n                r: 8\n              },\n              strokeWidth: 2\n            }, state, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 15\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"trend-analysis\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Trend Analysis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: selectedIndicator === 'UNRATE' ? 'Unemployment rates typically fluctuate with economic cycles. Lower rates indicate stronger job markets.' : selectedIndicator === 'MSPUS' ? 'Housing prices reflect both economic conditions and regional demand. Sustained price growth may indicate strong local economies but can impact affordability.' : 'Per capita income growth reflects overall economic prosperity and can vary significantly by region due to industry mix and cost of living differences.'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: selectedStates.length > 0 ? `The data shows ${selectedIndicator === 'UNRATE' ? trendData.length > 0 && selectedStates.includes('TX') ? 'Texas has maintained consistently lower unemployment rates compared to other states.' : 'significant variation in unemployment rates across states.' : selectedIndicator === 'MSPUS' ? trendData.length > 0 && selectedStates.includes('CA') ? 'California continues to have significantly higher housing prices than most other states.' : 'substantial differences in housing markets across regions.' : trendData.length > 0 && selectedStates.includes('NY') ? 'New York and California maintain higher per capita incomes than most other states.' : 'different income trajectories across states, reflecting their unique economic structures.'}` : 'Select states to compare trends over time.'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 280,\n    columnNumber: 5\n  }, this);\n};\n_s(StateTrendComparison, \"VyV6D9CD37hj8+s1Vdy3PYDiS34=\");\n_c = StateTrendComparison;\nexport default StateTrendComparison;\nvar _c;\n$RefreshReg$(_c, \"StateTrendComparison\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","axios","formatDate","formatPercentage","formatCurrency","jsxDEV","_jsxDEV","StateTrendComparison","selectedIndicator","_s","loading","setLoading","error","setError","trendData","setTrendData","selectedStates","setSelectedStates","availableStates","setAvailableStates","timeRange","setTimeRange","stateColors","fetchTrendData","simulatedData","generateSimulatedTrendData","statesList","code","name","err","console","states","indicator","range","data","numPoints","now","Date","baseValues","i","date","setMonth","getMonth","point","toISOString","split","forEach","state","baseValue","randomFactor","Math","random","trendFactor","value","max","min","parseFloat","toFixed","round","push","handleStateChange","stateCode","includes","filter","length","handleTimeRangeChange","formatYAxisTick","CustomTooltip","active","payload","label","className","style","backgroundColor","padding","border","children","margin","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","map","entry","index","_availableStates$find","stateName","find","dataKey","formattedValue","toLocaleString","color","getChartTitle","onClick","Object","keys","height","marginTop","width","top","right","left","bottom","strokeDasharray","tickFormatter","content","_availableStates$find2","type","s","stroke","activeDot","r","strokeWidth","_c","$RefreshReg$"],"sources":["/home/tazmak/Desktop/2024_Code/py-Projects/FRED-tracker/Federal-Reserve-Economy-Tracker/frontend/src/components/indicators/StateTrendComparison.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport axios from 'axios';\nimport { formatDate } from '../utils/dateUtils';\nimport { formatPercentage, formatCurrency } from '../utils/formatUtils';\n\nconst StateTrendComparison = ({ selectedIndicator = 'UNRATE' }) => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [trendData, setTrendData] = useState([]);\n  const [selectedStates, setSelectedStates] = useState(['CA', 'TX', 'NY', 'FL']);\n  const [availableStates, setAvailableStates] = useState([]);\n  const [timeRange, setTimeRange] = useState('5y');\n  \n  // Define colors for each state\n  const stateColors = {\n    'CA': '#ff7f0e', // Orange\n    'TX': '#2ca02c', // Green\n    'NY': '#1f77b4', // Blue\n    'FL': '#d62728', // Red\n    'IL': '#9467bd', // Purple\n    'PA': '#8c564b', // Brown\n    'OH': '#e377c2', // Pink\n    'GA': '#7f7f7f', // Gray\n    'NC': '#bcbd22', // Olive\n    'MI': '#17becf'  // Cyan\n  };\n  \n  // This would normally fetch real historical data from your API\n  // For demo purposes, we'll simulate it\n  useEffect(() => {\n    const fetchTrendData = async () => {\n      setLoading(true);\n      try {\n        // In a real implementation, you would call your API for historical data\n        // For example:\n        // const response = await axios.get(`/api/regional-trends/${selectedIndicator}?states=${selectedStates.join(',')}`);\n        // setTrendData(response.data);\n        \n        // For demo, we'll generate some plausible trend data\n        const simulatedData = generateSimulatedTrendData(selectedStates, selectedIndicator, timeRange);\n        setTrendData(simulatedData);\n        \n        // Also simulate a list of available states\n        const statesList = [\n          { code: 'AL', name: 'Alabama' },\n          { code: 'AK', name: 'Alaska' },\n          { code: 'AZ', name: 'Arizona' },\n          { code: 'AR', name: 'Arkansas' },\n          { code: 'CA', name: 'California' },\n          { code: 'CO', name: 'Colorado' },\n          { code: 'CT', name: 'Connecticut' },\n          { code: 'DE', name: 'Delaware' },\n          { code: 'FL', name: 'Florida' },\n          { code: 'GA', name: 'Georgia' },\n          { code: 'HI', name: 'Hawaii' },\n          { code: 'ID', name: 'Idaho' },\n          { code: 'IL', name: 'Illinois' },\n          { code: 'IN', name: 'Indiana' },\n          { code: 'IA', name: 'Iowa' },\n          { code: 'KS', name: 'Kansas' },\n          { code: 'KY', name: 'Kentucky' },\n          { code: 'LA', name: 'Louisiana' },\n          { code: 'ME', name: 'Maine' },\n          { code: 'MD', name: 'Maryland' },\n          { code: 'MA', name: 'Massachusetts' },\n          { code: 'MI', name: 'Michigan' },\n          { code: 'MN', name: 'Minnesota' },\n          { code: 'MS', name: 'Mississippi' },\n          { code: 'MO', name: 'Missouri' },\n          { code: 'MT', name: 'Montana' },\n          { code: 'NE', name: 'Nebraska' },\n          { code: 'NV', name: 'Nevada' },\n          { code: 'NH', name: 'New Hampshire' },\n          { code: 'NJ', name: 'New Jersey' },\n          { code: 'NM', name: 'New Mexico' },\n          { code: 'NY', name: 'New York' },\n          { code: 'NC', name: 'North Carolina' },\n          { code: 'ND', name: 'North Dakota' },\n          { code: 'OH', name: 'Ohio' },\n          { code: 'OK', name: 'Oklahoma' },\n          { code: 'OR', name: 'Oregon' },\n          { code: 'PA', name: 'Pennsylvania' },\n          { code: 'RI', name: 'Rhode Island' },\n          { code: 'SC', name: 'South Carolina' },\n          { code: 'SD', name: 'South Dakota' },\n          { code: 'TN', name: 'Tennessee' },\n          { code: 'TX', name: 'Texas' },\n          { code: 'UT', name: 'Utah' },\n          { code: 'VT', name: 'Vermont' },\n          { code: 'VA', name: 'Virginia' },\n          { code: 'WA', name: 'Washington' },\n          { code: 'WV', name: 'West Virginia' },\n          { code: 'WI', name: 'Wisconsin' },\n          { code: 'WY', name: 'Wyoming' }\n        ];\n        \n        setAvailableStates(statesList);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching trend data:', err);\n        setError('Failed to load trend data');\n        setLoading(false);\n      }\n    };\n    \n    fetchTrendData();\n  }, [selectedIndicator, selectedStates, timeRange]);\n  \n  // Helper function to generate simulated trend data\n  const generateSimulatedTrendData = (states, indicator, range) => {\n    const data = [];\n    const numPoints = range === '1y' ? 12 : range === '5y' ? 20 : 30;\n    const now = new Date();\n    \n    // Base values for different indicators\n    const baseValues = {\n      'UNRATE': {\n        'CA': 4.2, 'TX': 3.8, 'NY': 4.5, 'FL': 3.2, 'IL': 4.7, \n        'PA': 4.1, 'OH': 4.3, 'GA': 3.6, 'NC': 3.9, 'MI': 4.8\n      },\n      'MSPUS': {\n        'CA': 650000, 'TX': 300000, 'NY': 550000, 'FL': 375000, 'IL': 275000, \n        'PA': 250000, 'OH': 220000, 'GA': 290000, 'NC': 310000, 'MI': 235000\n      },\n      'PCPI': {\n        'CA': 75000, 'TX': 55000, 'NY': 73000, 'FL': 58000, 'IL': 62000, \n        'PA': 60000, 'OH': 53000, 'GA': 56000, 'NC': 54000, 'MI': 52000\n      }\n    };\n    \n    // Generate data points for each date\n    for (let i = 0; i < numPoints; i++) {\n      const date = new Date(now);\n      date.setMonth(date.getMonth() - (numPoints - i));\n      \n      const point = {\n        date: date.toISOString().split('T')[0]\n      };\n      \n      // Add value for each selected state\n      states.forEach(state => {\n        // Base value for this state and indicator\n        const baseValue = baseValues[indicator][state] || \n          (indicator === 'UNRATE' ? 4.0 : \n           indicator === 'MSPUS' ? 300000 : 55000);\n        \n        // Add some random variation to create a realistic trend\n        let randomFactor = 0;\n        if (indicator === 'UNRATE') {\n          // Unemployment trends\n          if (i < numPoints / 3) {\n            randomFactor = Math.random() * 0.5 - 0.1; // Slightly increasing\n          } else if (i < numPoints * 2/3) {\n            randomFactor = Math.random() * 0.5 - 0.3; // Decreasing trend\n          } else {\n            randomFactor = Math.random() * 0.4 - 0.2; // Stabilizing\n          }\n        } else {\n          // Housing prices and income typically trend upward\n          if (i < numPoints / 2) {\n            randomFactor = Math.random() * 0.05; // Slow growth\n          } else {\n            randomFactor = Math.random() * 0.08; // Faster growth\n          }\n        }\n        \n        // Calculate the value with trend and randomness\n        const trendFactor = 1 + (i / numPoints) * (indicator === 'UNRATE' ? -0.1 : 0.15);\n        const value = baseValue * trendFactor * (1 + randomFactor);\n        \n        // Add to the data point with appropriate precision\n        if (indicator === 'UNRATE') {\n          point[state] = Math.max(2.5, Math.min(8.0, parseFloat(value.toFixed(1))));\n        } else if (indicator === 'MSPUS') {\n          point[state] = Math.round(value / 1000) * 1000; // Round to nearest thousand\n        } else {\n          point[state] = Math.round(value / 100) * 100; // Round to nearest hundred\n        }\n      });\n      \n      data.push(point);\n    }\n    \n    return data;\n  };\n  \n  // Handle changing selected states\n  const handleStateChange = (stateCode) => {\n    if (selectedStates.includes(stateCode)) {\n      // Remove state if already selected\n      setSelectedStates(selectedStates.filter(code => code !== stateCode));\n    } else {\n      // Add state if not selected (limit to 5)\n      if (selectedStates.length < 5) {\n        setSelectedStates([...selectedStates, stateCode]);\n      }\n    }\n  };\n  \n  // Handle time range change\n  const handleTimeRangeChange = (range) => {\n    setTimeRange(range);\n  };\n  \n  // Format Y-axis tick values\n  const formatYAxisTick = (value) => {\n    if (selectedIndicator === 'UNRATE') {\n      return `${value}%`;\n    } else if (selectedIndicator === 'MSPUS') {\n      if (value >= 1000000) {\n        return `$${(value / 1000000).toFixed(1)}M`;\n      } else if (value >= 1000) {\n        return `$${(value / 1000).toFixed(0)}K`;\n      }\n      return `$${value}`;\n    } else if (selectedIndicator === 'PCPI') {\n      if (value >= 1000) {\n        return `$${(value / 1000).toFixed(0)}K`;\n      }\n      return `$${value}`;\n    }\n    return value;\n  };\n  \n  // Custom tooltip for the chart\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"custom-tooltip\" style={{ backgroundColor: 'white', padding: '10px', border: '1px solid #ccc' }}>\n          <p className=\"label\" style={{ margin: '0', fontWeight: 'bold' }}>{formatDate(label)}</p>\n          {payload.map((entry, index) => {\n            const stateName = availableStates.find(state => state.code === entry.dataKey)?.name || entry.dataKey;\n            let formattedValue;\n            \n            if (selectedIndicator === 'UNRATE') {\n              formattedValue = `${entry.value}%`;\n            } else if (selectedIndicator === 'MSPUS') {\n              formattedValue = `$${entry.value.toLocaleString()}`;\n            } else if (selectedIndicator === 'PCPI') {\n              formattedValue = `$${entry.value.toLocaleString()}`;\n            } else {\n              formattedValue = entry.value;\n            }\n            \n            return (\n              <p key={`item-${index}`} style={{ margin: '0', color: entry.color }}>\n                <span style={{ fontWeight: 'bold' }}>{stateName}: </span>\n                <span>{formattedValue}</span>\n              </p>\n            );\n          })}\n        </div>\n      );\n    }\n    return null;\n  };\n  \n  // Get chart title based on selected indicator\n  const getChartTitle = () => {\n    if (selectedIndicator === 'UNRATE') {\n      return 'Unemployment Rate Over Time';\n    } else if (selectedIndicator === 'MSPUS') {\n      return 'Median House Price Over Time';\n    } else if (selectedIndicator === 'PCPI') {\n      return 'Per Capita Personal Income Over Time';\n    }\n    return 'State Comparison Over Time';\n  };\n  \n  if (loading) {\n    return <div className=\"loading\">Loading trend data...</div>;\n  }\n  \n  if (error) {\n    return <div className=\"error\">{error}</div>;\n  }\n  \n  return (\n    <div className=\"state-trend-comparison\">\n      <h3>{getChartTitle()}</h3>\n      \n      <div className=\"controls\">\n        <div className=\"time-controls\">\n          <span>Time Range: </span>\n          <div className=\"time-buttons\">\n            <button \n              className={timeRange === '1y' ? 'active' : ''} \n              onClick={() => handleTimeRangeChange('1y')}\n            >\n              1 Year\n            </button>\n            <button \n              className={timeRange === '5y' ? 'active' : ''} \n              onClick={() => handleTimeRangeChange('5y')}\n            >\n              5 Years\n            </button>\n            <button \n              className={timeRange === '10y' ? 'active' : ''} \n              onClick={() => handleTimeRangeChange('10y')}\n            >\n              10 Years\n            </button>\n          </div>\n        </div>\n        \n        <div className=\"state-selector\">\n          <div className=\"state-chips\">\n            {availableStates\n              .filter(state => Object.keys(stateColors).includes(state.code))\n              .map(state => (\n                <div \n                  key={state.code}\n                  className={`state-chip ${selectedStates.includes(state.code) ? 'selected' : ''}`}\n                  style={{ \n                    backgroundColor: selectedStates.includes(state.code) ? stateColors[state.code] : '#f0f0f0',\n                    color: selectedStates.includes(state.code) ? 'white' : '#333'\n                  }}\n                  onClick={() => handleStateChange(state.code)}\n                >\n                  {state.code}\n                </div>\n              ))}\n          </div>\n          <div className=\"state-selection-help\">\n            <small>Click to add/remove states (max 5)</small>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"trend-chart\" style={{ height: '400px', marginTop: '20px' }}>\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <LineChart\n            data={trendData}\n            margin={{ top: 20, right: 30, left: 30, bottom: 10 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis \n              dataKey=\"date\" \n              tickFormatter={(value) => formatDate(value, 'MMM yyyy')}\n            />\n            <YAxis \n              tickFormatter={formatYAxisTick}\n            />\n            <Tooltip content={<CustomTooltip />} />\n            <Legend />\n            {selectedStates.map(state => (\n              <Line \n                key={state}\n                type=\"monotone\" \n                dataKey={state} \n                name={availableStates.find(s => s.code === state)?.name || state} \n                stroke={stateColors[state] || '#8884d8'} \n                activeDot={{ r: 8 }}\n                strokeWidth={2}\n              />\n            ))}\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n      \n      <div className=\"trend-analysis\">\n        <h4>Trend Analysis</h4>\n        <p>\n          {selectedIndicator === 'UNRATE' \n            ? 'Unemployment rates typically fluctuate with economic cycles. Lower rates indicate stronger job markets.'\n            : selectedIndicator === 'MSPUS'\n              ? 'Housing prices reflect both economic conditions and regional demand. Sustained price growth may indicate strong local economies but can impact affordability.'\n              : 'Per capita income growth reflects overall economic prosperity and can vary significantly by region due to industry mix and cost of living differences.'\n          }\n        </p>\n        <p>\n          {selectedStates.length > 0 \n            ? `The data shows ${\n                selectedIndicator === 'UNRATE' \n                  ? trendData.length > 0 && selectedStates.includes('TX')\n                    ? 'Texas has maintained consistently lower unemployment rates compared to other states.'\n                    : 'significant variation in unemployment rates across states.'\n                  : selectedIndicator === 'MSPUS'\n                    ? trendData.length > 0 && selectedStates.includes('CA')\n                      ? 'California continues to have significantly higher housing prices than most other states.'\n                      : 'substantial differences in housing markets across regions.'\n                    : trendData.length > 0 && selectedStates.includes('NY')\n                      ? 'New York and California maintain higher per capita incomes than most other states.'\n                      : 'different income trajectories across states, reflecting their unique economic structures.'\n              }`\n            : 'Select states to compare trends over time.'\n          }\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default StateTrendComparison;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}