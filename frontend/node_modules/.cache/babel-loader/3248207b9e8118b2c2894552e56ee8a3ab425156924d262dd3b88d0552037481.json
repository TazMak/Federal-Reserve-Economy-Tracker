{"ast":null,"code":"var _jsxFileName = \"/home/tazmak/Desktop/2024_Code/py-Projects/FRED-tracker/Federal-Reserve-Economy-Tracker/frontend/src/components/indicators/RegionalData.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\n\n// United States GeoJSON \nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\n/**\n * RegionalData component for displaying economic data by state on an interactive map\n */\nconst RegionalData = () => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [hoveredState, setHoveredState] = useState(null);\n  const [selectedIndicator, setSelectedIndicator] = useState('MSPUS'); // Default to Median House Price\n  const [stateColors, setStateColors] = useState({});\n  const [allStatesData, setAllStatesData] = useState({});\n  const [indicatorData, setIndicatorData] = useState({});\n\n  // Available indicators\n  const indicators = [{\n    id: 'UNRATE',\n    name: 'Unemployment Rate'\n  }, {\n    id: 'MSPUS',\n    name: 'Median House Price'\n  }, {\n    id: 'PCPI',\n    name: 'Per Capita Personal Income'\n  }];\n\n  // Initial data fetch for all indicators\n  useEffect(() => {\n    const fetchAllIndicators = async () => {\n      try {\n        setLoading(true);\n\n        // Fetch data for all three indicators in parallel\n        const indicatorPromises = indicators.map(indicator => axios.get(`/api/regional/${indicator.id}`));\n        const responses = await Promise.all(indicatorPromises);\n\n        // Process data for all indicators\n        const allIndicatorData = {};\n        responses.forEach((response, index) => {\n          const indicator = indicators[index].id;\n          allIndicatorData[indicator] = response.data;\n        });\n        setIndicatorData(allIndicatorData);\n\n        // Update displayed indicator\n        updateDisplayedIndicator(selectedIndicator, allIndicatorData);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching regional data:', err);\n        setError(`Failed to load regional data: ${err.message}`);\n        setLoading(false);\n      }\n    };\n    fetchAllIndicators();\n  }, []); // Only run once on component mount\n\n  // Update displayed indicator when selection changes\n  useEffect(() => {\n    if (Object.keys(indicatorData).length > 0) {\n      updateDisplayedIndicator(selectedIndicator, indicatorData);\n    }\n  }, [selectedIndicator]);\n\n  // Function to update the displayed indicator\n  const updateDisplayedIndicator = (indicator, data) => {\n    if (!data[indicator] || !data[indicator].states) {\n      console.warn(`No data available for indicator: ${indicator}`);\n      return;\n    }\n    const currentData = data[indicator];\n    const stateData = {};\n    const colorData = {};\n\n    // Get min/max values for normalization\n    const values = currentData.states.filter(state => state.value !== null && state.value !== undefined).map(state => state.value);\n    if (values.length === 0) {\n      console.warn(\"No valid values found in state data\");\n      return;\n    }\n    const minValue = Math.min(...values);\n    const maxValue = Math.max(...values);\n    const valueRange = maxValue - minValue;\n    console.log(`${indicator} range:`, minValue, \"to\", maxValue);\n\n    // Process each state\n    currentData.states.forEach(state => {\n      // Store the state data\n      stateData[state.code] = state;\n\n      // Calculate color\n      if (state.value !== null && state.value !== undefined) {\n        // Normalize value between 0 and 1\n        const normalizedValue = valueRange > 0 ? (state.value - minValue) / valueRange : 0.5; // Default to middle value if range is 0\n\n        // Generate color based on indicator\n        let color;\n        if (indicator === 'UNRATE') {\n          // For unemployment, red is high (bad), green is low (good)\n          const r = Math.floor(normalizedValue * 255);\n          const g = Math.floor((1 - normalizedValue) * 255);\n          color = `rgb(${r}, ${g}, 0)`;\n        } else {\n          // For income/housing prices, green is high (good), red is low (bad)\n          const r = Math.floor((1 - normalizedValue) * 255);\n          const g = Math.floor(normalizedValue * 255);\n          color = `rgb(${r}, ${g}, 0)`;\n        }\n        colorData[state.code] = {\n          color,\n          value: state.value\n        };\n      } else {\n        colorData[state.code] = {\n          color: '#D3D3D3',\n          value: null\n        }; // Gray for no data\n      }\n    });\n    setAllStatesData(stateData);\n    setStateColors(colorData);\n  };\n\n  // Handle indicator change\n  const handleIndicatorChange = e => {\n    setSelectedIndicator(e.target.value);\n  };\n\n  // Format value based on indicator type\n  const formatValue = (value, indicator) => {\n    if (value === null || value === undefined) return 'No data available';\n    switch (indicator) {\n      case 'UNRATE':\n        return `${value.toFixed(1)}%`;\n      case 'MSPUS':\n        return `$${value.toLocaleString()}.00`;\n      case 'PCPI':\n        return `$${value.toLocaleString()}.00`;\n      default:\n        return value.toLocaleString();\n    }\n  };\n\n  // Get indicator friendly name\n  const getIndicatorName = indicator => {\n    const ind = indicators.find(i => i.id === indicator);\n    return ind ? ind.name : indicator;\n  };\n\n  // Get all values for a state\n  const getAllStateValues = stateCode => {\n    const result = {};\n    indicators.forEach(indicator => {\n      if (indicatorData[indicator.id] && indicatorData[indicator.id].states) {\n        const stateInfo = indicatorData[indicator.id].states.find(state => state.code === stateCode);\n        if (stateInfo) {\n          result[indicator.id] = {\n            value: stateInfo.value,\n            formatted: formatValue(stateInfo.value, indicator.id),\n            date: stateInfo.date\n          };\n        }\n      }\n    });\n    return result;\n  };\n\n  // Show state info\n  const renderStateInfo = () => {\n    if (!hoveredState || !allStatesData[hoveredState]) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"default-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Hover over a state to view details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Currently displaying: \", getIndicatorName(selectedIndicator)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this);\n    }\n    const state = allStatesData[hoveredState];\n    const allValues = getAllStateValues(hoveredState);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"state-details\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: state.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"state-metric\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: getIndicatorName(selectedIndicator)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"metric-value\",\n          children: formatValue(state.value, selectedIndicator)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"metric-date\",\n          children: [\"As of \", state.date || 'N/A']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"additional-metrics\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Additional Indicators\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"metrics-grid\",\n          children: indicators.filter(ind => ind.id !== selectedIndicator).map(indicator => allValues[indicator.id] && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"metric-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"metric-name\",\n              children: [indicator.name, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"metric-value\",\n              children: allValues[indicator.id].formatted\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 21\n            }, this)]\n          }, indicator.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"economic-overview\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Economic Overview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: state.overview || `${state.name}'s ${selectedIndicator === 'UNRATE' ? 'unemployment rate' : selectedIndicator === 'MSPUS' ? 'housing market' : 'personal income'} \n              shows ${state.value !== null ? selectedIndicator === 'UNRATE' ? state.value < 4 ? 'strong performance' : state.value < 6 ? 'moderate performance' : 'challenges' : selectedIndicator === 'MSPUS' ? state.value > 400000 ? 'high prices' : 'moderate prices' : state.value > 60000 ? 'high income levels' : 'moderate income levels' : 'no data available'}.`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"regional-data indicator-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Regional Economic Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"indicator-select\",\n          children: \"Select Indicator: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"indicator-select\",\n          value: selectedIndicator,\n          onChange: handleIndicatorChange,\n          children: indicators.map(indicator => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: indicator.id,\n            children: indicator.name\n          }, indicator.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading regional data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"regional-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-and-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"us-map-container\",\n          children: /*#__PURE__*/_jsxDEV(ComposableMap, {\n            projection: \"geoAlbersUsa\",\n            children: /*#__PURE__*/_jsxDEV(Geographies, {\n              geography: geoUrl,\n              children: ({\n                geographies\n              }) => {\n                return geographies.map(geo => {\n                  // Get the state code - should be a 2-letter code like 'CA', 'TX', etc.\n                  const stateCode = geo.properties.STUSPS;\n\n                  // Get the color for this state\n                  const stateColor = stateColors[stateCode] ? stateColors[stateCode].color : '#D3D3D3'; // Default gray for no data\n\n                  return /*#__PURE__*/_jsxDEV(Geography, {\n                    geography: geo,\n                    fill: stateColor,\n                    stroke: \"#FFFFFF\",\n                    strokeWidth: 0.5,\n                    style: {\n                      default: {\n                        outline: \"none\"\n                      },\n                      hover: {\n                        outline: \"none\",\n                        stroke: \"#333\",\n                        strokeWidth: 1.5\n                      },\n                      pressed: {\n                        outline: \"none\"\n                      }\n                    },\n                    onMouseEnter: () => {\n                      setHoveredState(stateCode);\n                    },\n                    onMouseLeave: () => {\n                      setHoveredState(null);\n                    }\n                  }, geo.rsmKey, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 297,\n                    columnNumber: 25\n                  }, this);\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"state-info-panel\",\n          children: renderStateInfo()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Legend\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [selectedIndicator === 'UNRATE' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"legend-color\",\n              style: {\n                background: 'rgb(0, 255, 0)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Low Unemployment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"legend-color\",\n              style: {\n                background: 'rgb(255, 0, 0)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"High Unemployment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"legend-color\",\n              style: {\n                background: 'rgb(0, 255, 0)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"High \", selectedIndicator === 'MSPUS' ? 'House Prices' : 'Income']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"legend-color\",\n              style: {\n                background: 'rgb(255, 0, 0)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Low \", selectedIndicator === 'MSPUS' ? 'House Prices' : 'Income']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-color\",\n            style: {\n              background: '#D3D3D3'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"No Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 5\n  }, this);\n};\n_s(RegionalData, \"VlpdWBw6sJZ6qza7D7fBTQTpxEY=\");\n_c = RegionalData;\nexport default RegionalData;\nvar _c;\n$RefreshReg$(_c, \"RegionalData\");","map":{"version":3,"names":["React","useState","useEffect","axios","ComposableMap","Geographies","Geography","jsxDEV","_jsxDEV","Fragment","_Fragment","geoUrl","RegionalData","_s","loading","setLoading","error","setError","hoveredState","setHoveredState","selectedIndicator","setSelectedIndicator","stateColors","setStateColors","allStatesData","setAllStatesData","indicatorData","setIndicatorData","indicators","id","name","fetchAllIndicators","indicatorPromises","map","indicator","get","responses","Promise","all","allIndicatorData","forEach","response","index","data","updateDisplayedIndicator","err","console","message","Object","keys","length","states","warn","currentData","stateData","colorData","values","filter","state","value","undefined","minValue","Math","min","maxValue","max","valueRange","log","code","normalizedValue","color","r","floor","g","handleIndicatorChange","e","target","formatValue","toFixed","toLocaleString","getIndicatorName","ind","find","i","getAllStateValues","stateCode","result","stateInfo","formatted","date","renderStateInfo","className","children","fileName","_jsxFileName","lineNumber","columnNumber","allValues","overview","htmlFor","onChange","projection","geography","geographies","geo","properties","STUSPS","stateColor","fill","stroke","strokeWidth","style","default","outline","hover","pressed","onMouseEnter","onMouseLeave","rsmKey","background","_c","$RefreshReg$"],"sources":["/home/tazmak/Desktop/2024_Code/py-Projects/FRED-tracker/Federal-Reserve-Economy-Tracker/frontend/src/components/indicators/RegionalData.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\n\n// United States GeoJSON \nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\n/**\n * RegionalData component for displaying economic data by state on an interactive map\n */\nconst RegionalData = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [hoveredState, setHoveredState] = useState(null);\n  const [selectedIndicator, setSelectedIndicator] = useState('MSPUS'); // Default to Median House Price\n  const [stateColors, setStateColors] = useState({});\n  const [allStatesData, setAllStatesData] = useState({});\n  const [indicatorData, setIndicatorData] = useState({});\n\n  // Available indicators\n  const indicators = [\n    { id: 'UNRATE', name: 'Unemployment Rate' },\n    { id: 'MSPUS', name: 'Median House Price' },\n    { id: 'PCPI', name: 'Per Capita Personal Income' }\n  ];\n\n  // Initial data fetch for all indicators\n  useEffect(() => {\n    const fetchAllIndicators = async () => {\n      try {\n        setLoading(true);\n        \n        // Fetch data for all three indicators in parallel\n        const indicatorPromises = indicators.map(indicator => \n          axios.get(`/api/regional/${indicator.id}`)\n        );\n        \n        const responses = await Promise.all(indicatorPromises);\n        \n        // Process data for all indicators\n        const allIndicatorData = {};\n        \n        responses.forEach((response, index) => {\n          const indicator = indicators[index].id;\n          allIndicatorData[indicator] = response.data;\n        });\n        \n        setIndicatorData(allIndicatorData);\n        \n        // Update displayed indicator\n        updateDisplayedIndicator(selectedIndicator, allIndicatorData);\n        \n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching regional data:', err);\n        setError(`Failed to load regional data: ${err.message}`);\n        setLoading(false);\n      }\n    };\n    \n    fetchAllIndicators();\n  }, []); // Only run once on component mount\n\n  // Update displayed indicator when selection changes\n  useEffect(() => {\n    if (Object.keys(indicatorData).length > 0) {\n      updateDisplayedIndicator(selectedIndicator, indicatorData);\n    }\n  }, [selectedIndicator]);\n\n  // Function to update the displayed indicator\n  const updateDisplayedIndicator = (indicator, data) => {\n    if (!data[indicator] || !data[indicator].states) {\n      console.warn(`No data available for indicator: ${indicator}`);\n      return;\n    }\n    \n    const currentData = data[indicator];\n    const stateData = {};\n    const colorData = {};\n    \n    // Get min/max values for normalization\n    const values = currentData.states\n      .filter(state => state.value !== null && state.value !== undefined)\n      .map(state => state.value);\n    \n    if (values.length === 0) {\n      console.warn(\"No valid values found in state data\");\n      return;\n    }\n    \n    const minValue = Math.min(...values);\n    const maxValue = Math.max(...values);\n    const valueRange = maxValue - minValue;\n    \n    console.log(`${indicator} range:`, minValue, \"to\", maxValue);\n    \n    // Process each state\n    currentData.states.forEach(state => {\n      // Store the state data\n      stateData[state.code] = state;\n      \n      // Calculate color\n      if (state.value !== null && state.value !== undefined) {\n        // Normalize value between 0 and 1\n        const normalizedValue = valueRange > 0 \n          ? (state.value - minValue) / valueRange \n          : 0.5; // Default to middle value if range is 0\n        \n        // Generate color based on indicator\n        let color;\n        if (indicator === 'UNRATE') {\n          // For unemployment, red is high (bad), green is low (good)\n          const r = Math.floor(normalizedValue * 255);\n          const g = Math.floor((1 - normalizedValue) * 255);\n          color = `rgb(${r}, ${g}, 0)`;\n        } else {\n          // For income/housing prices, green is high (good), red is low (bad)\n          const r = Math.floor((1 - normalizedValue) * 255);\n          const g = Math.floor(normalizedValue * 255);\n          color = `rgb(${r}, ${g}, 0)`;\n        }\n        \n        colorData[state.code] = { color, value: state.value };\n      } else {\n        colorData[state.code] = { color: '#D3D3D3', value: null }; // Gray for no data\n      }\n    });\n    \n    setAllStatesData(stateData);\n    setStateColors(colorData);\n  };\n\n  // Handle indicator change\n  const handleIndicatorChange = (e) => {\n    setSelectedIndicator(e.target.value);\n  };\n\n  // Format value based on indicator type\n  const formatValue = (value, indicator) => {\n    if (value === null || value === undefined) return 'No data available';\n    \n    switch (indicator) {\n      case 'UNRATE':\n        return `${value.toFixed(1)}%`;\n      case 'MSPUS':\n        return `$${value.toLocaleString()}.00`;\n      case 'PCPI':\n        return `$${value.toLocaleString()}.00`;\n      default:\n        return value.toLocaleString();\n    }\n  };\n\n  // Get indicator friendly name\n  const getIndicatorName = (indicator) => {\n    const ind = indicators.find(i => i.id === indicator);\n    return ind ? ind.name : indicator;\n  };\n  \n  // Get all values for a state\n  const getAllStateValues = (stateCode) => {\n    const result = {};\n    \n    indicators.forEach(indicator => {\n      if (\n        indicatorData[indicator.id] && \n        indicatorData[indicator.id].states\n      ) {\n        const stateInfo = indicatorData[indicator.id].states.find(\n          state => state.code === stateCode\n        );\n        \n        if (stateInfo) {\n          result[indicator.id] = {\n            value: stateInfo.value,\n            formatted: formatValue(stateInfo.value, indicator.id),\n            date: stateInfo.date\n          };\n        }\n      }\n    });\n    \n    return result;\n  };\n  \n  // Show state info\n  const renderStateInfo = () => {\n    if (!hoveredState || !allStatesData[hoveredState]) {\n      return (\n        <div className=\"default-info\">\n          <h3>Hover over a state to view details</h3>\n          <p>Currently displaying: {getIndicatorName(selectedIndicator)}</p>\n        </div>\n      );\n    }\n    \n    const state = allStatesData[hoveredState];\n    const allValues = getAllStateValues(hoveredState);\n    \n    return (\n      <div className=\"state-details\">\n        <h3>{state.name}</h3>\n        \n        {/* Primary selected indicator */}\n        <div className=\"state-metric\">\n          <h4>{getIndicatorName(selectedIndicator)}</h4>\n          <div className=\"metric-value\">\n            {formatValue(state.value, selectedIndicator)}\n          </div>\n          <div className=\"metric-date\">\n            As of {state.date || 'N/A'}\n          </div>\n        </div>\n        \n        {/* Show other indicators */}\n        <div className=\"additional-metrics\">\n          <h4>Additional Indicators</h4>\n          <div className=\"metrics-grid\">\n            {indicators\n              .filter(ind => ind.id !== selectedIndicator)\n              .map(indicator => (\n                allValues[indicator.id] && (\n                  <div key={indicator.id} className=\"metric-item\">\n                    <div className=\"metric-name\">{indicator.name}:</div>\n                    <div className=\"metric-value\">{allValues[indicator.id].formatted}</div>\n                  </div>\n                )\n              ))\n            }\n          </div>\n        </div>\n        \n        {/* Economic overview */}\n        <div className=\"economic-overview\">\n          <h4>Economic Overview</h4>\n          <p>\n            {state.overview || \n              `${state.name}'s ${selectedIndicator === 'UNRATE' ? 'unemployment rate' : \n                selectedIndicator === 'MSPUS' ? 'housing market' : 'personal income'} \n              shows ${state.value !== null ? \n                selectedIndicator === 'UNRATE' ? \n                  state.value < 4 ? 'strong performance' : \n                  state.value < 6 ? 'moderate performance' : 'challenges' : \n                selectedIndicator === 'MSPUS' ? \n                  state.value > 400000 ? 'high prices' : 'moderate prices' : \n                  state.value > 60000 ? 'high income levels' : 'moderate income levels' \n                : 'no data available'}.`}\n          </p>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"regional-data indicator-page\">\n      <h2>Regional Economic Data</h2>\n      \n      <div className=\"controls\">\n        <div className=\"selector\">\n          <label htmlFor=\"indicator-select\">Select Indicator: </label>\n          <select \n            id=\"indicator-select\" \n            value={selectedIndicator} \n            onChange={handleIndicatorChange}\n          >\n            {indicators.map(indicator => (\n              <option key={indicator.id} value={indicator.id}>\n                {indicator.name}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n      \n      {loading ? (\n        <div className=\"loading\">Loading regional data...</div>\n      ) : error ? (\n        <div className=\"error\">{error}</div>\n      ) : (\n        <div className=\"regional-content\">\n          <div className=\"map-and-details\">\n            <div className=\"us-map-container\">\n              <ComposableMap projection=\"geoAlbersUsa\">\n                <Geographies geography={geoUrl}>\n                  {({ geographies }) => {\n                    return geographies.map(geo => {\n                      // Get the state code - should be a 2-letter code like 'CA', 'TX', etc.\n                      const stateCode = geo.properties.STUSPS;\n                      \n                      // Get the color for this state\n                      const stateColor = stateColors[stateCode] \n                        ? stateColors[stateCode].color \n                        : '#D3D3D3'; // Default gray for no data\n                      \n                      return (\n                        <Geography\n                          key={geo.rsmKey}\n                          geography={geo}\n                          fill={stateColor}\n                          stroke=\"#FFFFFF\"\n                          strokeWidth={0.5}\n                          style={{\n                            default: { outline: \"none\" },\n                            hover: { \n                              outline: \"none\", \n                              stroke: \"#333\",\n                              strokeWidth: 1.5\n                            },\n                            pressed: { outline: \"none\" },\n                          }}\n                          onMouseEnter={() => {\n                            setHoveredState(stateCode);\n                          }}\n                          onMouseLeave={() => {\n                            setHoveredState(null);\n                          }}\n                        />\n                      );\n                    });\n                  }}\n                </Geographies>\n              </ComposableMap>\n            </div>\n            <div className=\"state-info-panel\">\n              {renderStateInfo()}\n            </div>\n          </div>\n          \n          <div className=\"legend\">\n            <h3>Legend</h3>\n            <div className=\"legend-item\">\n              {selectedIndicator === 'UNRATE' ? (\n                <>\n                  <div className=\"legend-color\" style={{ background: 'rgb(0, 255, 0)' }}></div>\n                  <span>Low Unemployment</span>\n                  <div className=\"legend-color\" style={{ background: 'rgb(255, 0, 0)' }}></div>\n                  <span>High Unemployment</span>\n                </>\n              ) : (\n                <>\n                  <div className=\"legend-color\" style={{ background: 'rgb(0, 255, 0)' }}></div>\n                  <span>High {selectedIndicator === 'MSPUS' ? 'House Prices' : 'Income'}</span>\n                  <div className=\"legend-color\" style={{ background: 'rgb(255, 0, 0)' }}></div>\n                  <span>Low {selectedIndicator === 'MSPUS' ? 'House Prices' : 'Income'}</span>\n                </>\n              )}\n              <div className=\"legend-color\" style={{ background: '#D3D3D3' }}></div>\n              <span>No Data</span>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default RegionalData;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,EAAEC,WAAW,EAAEC,SAAS,QAAQ,mBAAmB;;AAEzE;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,MAAM,GAAG,yDAAyD;;AAExE;AACA;AACA;AACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACiB,YAAY,EAAEC,eAAe,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACmB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGpB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;EACrE,MAAM,CAACqB,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClD,MAAM,CAACuB,aAAa,EAAEC,gBAAgB,CAAC,GAAGxB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtD,MAAM,CAACyB,aAAa,EAAEC,gBAAgB,CAAC,GAAG1B,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEtD;EACA,MAAM2B,UAAU,GAAG,CACjB;IAAEC,EAAE,EAAE,QAAQ;IAAEC,IAAI,EAAE;EAAoB,CAAC,EAC3C;IAAED,EAAE,EAAE,OAAO;IAAEC,IAAI,EAAE;EAAqB,CAAC,EAC3C;IAAED,EAAE,EAAE,MAAM;IAAEC,IAAI,EAAE;EAA6B,CAAC,CACnD;;EAED;EACA5B,SAAS,CAAC,MAAM;IACd,MAAM6B,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,IAAI;QACFhB,UAAU,CAAC,IAAI,CAAC;;QAEhB;QACA,MAAMiB,iBAAiB,GAAGJ,UAAU,CAACK,GAAG,CAACC,SAAS,IAChD/B,KAAK,CAACgC,GAAG,CAAC,iBAAiBD,SAAS,CAACL,EAAE,EAAE,CAC3C,CAAC;QAED,MAAMO,SAAS,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACN,iBAAiB,CAAC;;QAEtD;QACA,MAAMO,gBAAgB,GAAG,CAAC,CAAC;QAE3BH,SAAS,CAACI,OAAO,CAAC,CAACC,QAAQ,EAAEC,KAAK,KAAK;UACrC,MAAMR,SAAS,GAAGN,UAAU,CAACc,KAAK,CAAC,CAACb,EAAE;UACtCU,gBAAgB,CAACL,SAAS,CAAC,GAAGO,QAAQ,CAACE,IAAI;QAC7C,CAAC,CAAC;QAEFhB,gBAAgB,CAACY,gBAAgB,CAAC;;QAElC;QACAK,wBAAwB,CAACxB,iBAAiB,EAAEmB,gBAAgB,CAAC;QAE7DxB,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAO8B,GAAG,EAAE;QACZC,OAAO,CAAC9B,KAAK,CAAC,+BAA+B,EAAE6B,GAAG,CAAC;QACnD5B,QAAQ,CAAC,iCAAiC4B,GAAG,CAACE,OAAO,EAAE,CAAC;QACxDhC,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDgB,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA7B,SAAS,CAAC,MAAM;IACd,IAAI8C,MAAM,CAACC,IAAI,CAACvB,aAAa,CAAC,CAACwB,MAAM,GAAG,CAAC,EAAE;MACzCN,wBAAwB,CAACxB,iBAAiB,EAAEM,aAAa,CAAC;IAC5D;EACF,CAAC,EAAE,CAACN,iBAAiB,CAAC,CAAC;;EAEvB;EACA,MAAMwB,wBAAwB,GAAGA,CAACV,SAAS,EAAES,IAAI,KAAK;IACpD,IAAI,CAACA,IAAI,CAACT,SAAS,CAAC,IAAI,CAACS,IAAI,CAACT,SAAS,CAAC,CAACiB,MAAM,EAAE;MAC/CL,OAAO,CAACM,IAAI,CAAC,oCAAoClB,SAAS,EAAE,CAAC;MAC7D;IACF;IAEA,MAAMmB,WAAW,GAAGV,IAAI,CAACT,SAAS,CAAC;IACnC,MAAMoB,SAAS,GAAG,CAAC,CAAC;IACpB,MAAMC,SAAS,GAAG,CAAC,CAAC;;IAEpB;IACA,MAAMC,MAAM,GAAGH,WAAW,CAACF,MAAM,CAC9BM,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,KAAK,KAAK,IAAI,IAAID,KAAK,CAACC,KAAK,KAAKC,SAAS,CAAC,CAClE3B,GAAG,CAACyB,KAAK,IAAIA,KAAK,CAACC,KAAK,CAAC;IAE5B,IAAIH,MAAM,CAACN,MAAM,KAAK,CAAC,EAAE;MACvBJ,OAAO,CAACM,IAAI,CAAC,qCAAqC,CAAC;MACnD;IACF;IAEA,MAAMS,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGP,MAAM,CAAC;IACpC,MAAMQ,QAAQ,GAAGF,IAAI,CAACG,GAAG,CAAC,GAAGT,MAAM,CAAC;IACpC,MAAMU,UAAU,GAAGF,QAAQ,GAAGH,QAAQ;IAEtCf,OAAO,CAACqB,GAAG,CAAC,GAAGjC,SAAS,SAAS,EAAE2B,QAAQ,EAAE,IAAI,EAAEG,QAAQ,CAAC;;IAE5D;IACAX,WAAW,CAACF,MAAM,CAACX,OAAO,CAACkB,KAAK,IAAI;MAClC;MACAJ,SAAS,CAACI,KAAK,CAACU,IAAI,CAAC,GAAGV,KAAK;;MAE7B;MACA,IAAIA,KAAK,CAACC,KAAK,KAAK,IAAI,IAAID,KAAK,CAACC,KAAK,KAAKC,SAAS,EAAE;QACrD;QACA,MAAMS,eAAe,GAAGH,UAAU,GAAG,CAAC,GAClC,CAACR,KAAK,CAACC,KAAK,GAAGE,QAAQ,IAAIK,UAAU,GACrC,GAAG,CAAC,CAAC;;QAET;QACA,IAAII,KAAK;QACT,IAAIpC,SAAS,KAAK,QAAQ,EAAE;UAC1B;UACA,MAAMqC,CAAC,GAAGT,IAAI,CAACU,KAAK,CAACH,eAAe,GAAG,GAAG,CAAC;UAC3C,MAAMI,CAAC,GAAGX,IAAI,CAACU,KAAK,CAAC,CAAC,CAAC,GAAGH,eAAe,IAAI,GAAG,CAAC;UACjDC,KAAK,GAAG,OAAOC,CAAC,KAAKE,CAAC,MAAM;QAC9B,CAAC,MAAM;UACL;UACA,MAAMF,CAAC,GAAGT,IAAI,CAACU,KAAK,CAAC,CAAC,CAAC,GAAGH,eAAe,IAAI,GAAG,CAAC;UACjD,MAAMI,CAAC,GAAGX,IAAI,CAACU,KAAK,CAACH,eAAe,GAAG,GAAG,CAAC;UAC3CC,KAAK,GAAG,OAAOC,CAAC,KAAKE,CAAC,MAAM;QAC9B;QAEAlB,SAAS,CAACG,KAAK,CAACU,IAAI,CAAC,GAAG;UAAEE,KAAK;UAAEX,KAAK,EAAED,KAAK,CAACC;QAAM,CAAC;MACvD,CAAC,MAAM;QACLJ,SAAS,CAACG,KAAK,CAACU,IAAI,CAAC,GAAG;UAAEE,KAAK,EAAE,SAAS;UAAEX,KAAK,EAAE;QAAK,CAAC,CAAC,CAAC;MAC7D;IACF,CAAC,CAAC;IAEFlC,gBAAgB,CAAC6B,SAAS,CAAC;IAC3B/B,cAAc,CAACgC,SAAS,CAAC;EAC3B,CAAC;;EAED;EACA,MAAMmB,qBAAqB,GAAIC,CAAC,IAAK;IACnCtD,oBAAoB,CAACsD,CAAC,CAACC,MAAM,CAACjB,KAAK,CAAC;EACtC,CAAC;;EAED;EACA,MAAMkB,WAAW,GAAGA,CAAClB,KAAK,EAAEzB,SAAS,KAAK;IACxC,IAAIyB,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKC,SAAS,EAAE,OAAO,mBAAmB;IAErE,QAAQ1B,SAAS;MACf,KAAK,QAAQ;QACX,OAAO,GAAGyB,KAAK,CAACmB,OAAO,CAAC,CAAC,CAAC,GAAG;MAC/B,KAAK,OAAO;QACV,OAAO,IAAInB,KAAK,CAACoB,cAAc,CAAC,CAAC,KAAK;MACxC,KAAK,MAAM;QACT,OAAO,IAAIpB,KAAK,CAACoB,cAAc,CAAC,CAAC,KAAK;MACxC;QACE,OAAOpB,KAAK,CAACoB,cAAc,CAAC,CAAC;IACjC;EACF,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAI9C,SAAS,IAAK;IACtC,MAAM+C,GAAG,GAAGrD,UAAU,CAACsD,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACtD,EAAE,KAAKK,SAAS,CAAC;IACpD,OAAO+C,GAAG,GAAGA,GAAG,CAACnD,IAAI,GAAGI,SAAS;EACnC,CAAC;;EAED;EACA,MAAMkD,iBAAiB,GAAIC,SAAS,IAAK;IACvC,MAAMC,MAAM,GAAG,CAAC,CAAC;IAEjB1D,UAAU,CAACY,OAAO,CAACN,SAAS,IAAI;MAC9B,IACER,aAAa,CAACQ,SAAS,CAACL,EAAE,CAAC,IAC3BH,aAAa,CAACQ,SAAS,CAACL,EAAE,CAAC,CAACsB,MAAM,EAClC;QACA,MAAMoC,SAAS,GAAG7D,aAAa,CAACQ,SAAS,CAACL,EAAE,CAAC,CAACsB,MAAM,CAAC+B,IAAI,CACvDxB,KAAK,IAAIA,KAAK,CAACU,IAAI,KAAKiB,SAC1B,CAAC;QAED,IAAIE,SAAS,EAAE;UACbD,MAAM,CAACpD,SAAS,CAACL,EAAE,CAAC,GAAG;YACrB8B,KAAK,EAAE4B,SAAS,CAAC5B,KAAK;YACtB6B,SAAS,EAAEX,WAAW,CAACU,SAAS,CAAC5B,KAAK,EAAEzB,SAAS,CAACL,EAAE,CAAC;YACrD4D,IAAI,EAAEF,SAAS,CAACE;UAClB,CAAC;QACH;MACF;IACF,CAAC,CAAC;IAEF,OAAOH,MAAM;EACf,CAAC;;EAED;EACA,MAAMI,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAI,CAACxE,YAAY,IAAI,CAACM,aAAa,CAACN,YAAY,CAAC,EAAE;MACjD,oBACEV,OAAA;QAAKmF,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAC3BpF,OAAA;UAAAoF,QAAA,EAAI;QAAkC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC3CxF,OAAA;UAAAoF,QAAA,GAAG,wBAAsB,EAACZ,gBAAgB,CAAC5D,iBAAiB,CAAC;QAAA;UAAAyE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/D,CAAC;IAEV;IAEA,MAAMtC,KAAK,GAAGlC,aAAa,CAACN,YAAY,CAAC;IACzC,MAAM+E,SAAS,GAAGb,iBAAiB,CAAClE,YAAY,CAAC;IAEjD,oBACEV,OAAA;MAAKmF,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5BpF,OAAA;QAAAoF,QAAA,EAAKlC,KAAK,CAAC5B;MAAI;QAAA+D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAGrBxF,OAAA;QAAKmF,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAC3BpF,OAAA;UAAAoF,QAAA,EAAKZ,gBAAgB,CAAC5D,iBAAiB;QAAC;UAAAyE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC9CxF,OAAA;UAAKmF,SAAS,EAAC,cAAc;UAAAC,QAAA,EAC1Bf,WAAW,CAACnB,KAAK,CAACC,KAAK,EAAEvC,iBAAiB;QAAC;UAAAyE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzC,CAAC,eACNxF,OAAA;UAAKmF,SAAS,EAAC,aAAa;UAAAC,QAAA,GAAC,QACrB,EAAClC,KAAK,CAAC+B,IAAI,IAAI,KAAK;QAAA;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAGNxF,OAAA;QAAKmF,SAAS,EAAC,oBAAoB;QAAAC,QAAA,gBACjCpF,OAAA;UAAAoF,QAAA,EAAI;QAAqB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC9BxF,OAAA;UAAKmF,SAAS,EAAC,cAAc;UAAAC,QAAA,EAC1BhE,UAAU,CACR6B,MAAM,CAACwB,GAAG,IAAIA,GAAG,CAACpD,EAAE,KAAKT,iBAAiB,CAAC,CAC3Ca,GAAG,CAACC,SAAS,IACZ+D,SAAS,CAAC/D,SAAS,CAACL,EAAE,CAAC,iBACrBrB,OAAA;YAAwBmF,SAAS,EAAC,aAAa;YAAAC,QAAA,gBAC7CpF,OAAA;cAAKmF,SAAS,EAAC,aAAa;cAAAC,QAAA,GAAE1D,SAAS,CAACJ,IAAI,EAAC,GAAC;YAAA;cAAA+D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACpDxF,OAAA;cAAKmF,SAAS,EAAC,cAAc;cAAAC,QAAA,EAAEK,SAAS,CAAC/D,SAAS,CAACL,EAAE,CAAC,CAAC2D;YAAS;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA,GAF/D9D,SAAS,CAACL,EAAE;YAAAgE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAGjB,CAER;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAED,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAGNxF,OAAA;QAAKmF,SAAS,EAAC,mBAAmB;QAAAC,QAAA,gBAChCpF,OAAA;UAAAoF,QAAA,EAAI;QAAiB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC1BxF,OAAA;UAAAoF,QAAA,EACGlC,KAAK,CAACwC,QAAQ,IACb,GAAGxC,KAAK,CAAC5B,IAAI,MAAMV,iBAAiB,KAAK,QAAQ,GAAG,mBAAmB,GACrEA,iBAAiB,KAAK,OAAO,GAAG,gBAAgB,GAAG,iBAAiB;AACpF,sBAAsBsC,KAAK,CAACC,KAAK,KAAK,IAAI,GAC1BvC,iBAAiB,KAAK,QAAQ,GAC5BsC,KAAK,CAACC,KAAK,GAAG,CAAC,GAAG,oBAAoB,GACtCD,KAAK,CAACC,KAAK,GAAG,CAAC,GAAG,sBAAsB,GAAG,YAAY,GACzDvC,iBAAiB,KAAK,OAAO,GAC3BsC,KAAK,CAACC,KAAK,GAAG,MAAM,GAAG,aAAa,GAAG,iBAAiB,GACxDD,KAAK,CAACC,KAAK,GAAG,KAAK,GAAG,oBAAoB,GAAG,wBAAwB,GACrE,mBAAmB;QAAG;UAAAkC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV,CAAC;EAED,oBACExF,OAAA;IAAKmF,SAAS,EAAC,8BAA8B;IAAAC,QAAA,gBAC3CpF,OAAA;MAAAoF,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE/BxF,OAAA;MAAKmF,SAAS,EAAC,UAAU;MAAAC,QAAA,eACvBpF,OAAA;QAAKmF,SAAS,EAAC,UAAU;QAAAC,QAAA,gBACvBpF,OAAA;UAAO2F,OAAO,EAAC,kBAAkB;UAAAP,QAAA,EAAC;QAAkB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC5DxF,OAAA;UACEqB,EAAE,EAAC,kBAAkB;UACrB8B,KAAK,EAAEvC,iBAAkB;UACzBgF,QAAQ,EAAE1B,qBAAsB;UAAAkB,QAAA,EAE/BhE,UAAU,CAACK,GAAG,CAACC,SAAS,iBACvB1B,OAAA;YAA2BmD,KAAK,EAAEzB,SAAS,CAACL,EAAG;YAAA+D,QAAA,EAC5C1D,SAAS,CAACJ;UAAI,GADJI,SAAS,CAACL,EAAE;YAAAgE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEjB,CACT;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EAELlF,OAAO,gBACNN,OAAA;MAAKmF,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAC;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,GACrDhF,KAAK,gBACPR,OAAA;MAAKmF,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAE5E;IAAK;MAAA6E,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,gBAEpCxF,OAAA;MAAKmF,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/BpF,OAAA;QAAKmF,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC9BpF,OAAA;UAAKmF,SAAS,EAAC,kBAAkB;UAAAC,QAAA,eAC/BpF,OAAA,CAACJ,aAAa;YAACiG,UAAU,EAAC,cAAc;YAAAT,QAAA,eACtCpF,OAAA,CAACH,WAAW;cAACiG,SAAS,EAAE3F,MAAO;cAAAiF,QAAA,EAC5BA,CAAC;gBAAEW;cAAY,CAAC,KAAK;gBACpB,OAAOA,WAAW,CAACtE,GAAG,CAACuE,GAAG,IAAI;kBAC5B;kBACA,MAAMnB,SAAS,GAAGmB,GAAG,CAACC,UAAU,CAACC,MAAM;;kBAEvC;kBACA,MAAMC,UAAU,GAAGrF,WAAW,CAAC+D,SAAS,CAAC,GACrC/D,WAAW,CAAC+D,SAAS,CAAC,CAACf,KAAK,GAC5B,SAAS,CAAC,CAAC;;kBAEf,oBACE9D,OAAA,CAACF,SAAS;oBAERgG,SAAS,EAAEE,GAAI;oBACfI,IAAI,EAAED,UAAW;oBACjBE,MAAM,EAAC,SAAS;oBAChBC,WAAW,EAAE,GAAI;oBACjBC,KAAK,EAAE;sBACLC,OAAO,EAAE;wBAAEC,OAAO,EAAE;sBAAO,CAAC;sBAC5BC,KAAK,EAAE;wBACLD,OAAO,EAAE,MAAM;wBACfJ,MAAM,EAAE,MAAM;wBACdC,WAAW,EAAE;sBACf,CAAC;sBACDK,OAAO,EAAE;wBAAEF,OAAO,EAAE;sBAAO;oBAC7B,CAAE;oBACFG,YAAY,EAAEA,CAAA,KAAM;sBAClBjG,eAAe,CAACkE,SAAS,CAAC;oBAC5B,CAAE;oBACFgC,YAAY,EAAEA,CAAA,KAAM;sBAClBlG,eAAe,CAAC,IAAI,CAAC;oBACvB;kBAAE,GAnBGqF,GAAG,CAACc,MAAM;oBAAAzB,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAoBhB,CAAC;gBAEN,CAAC,CAAC;cACJ;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACU;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACD;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACb,CAAC,eACNxF,OAAA;UAAKmF,SAAS,EAAC,kBAAkB;UAAAC,QAAA,EAC9BF,eAAe,CAAC;QAAC;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACf,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAENxF,OAAA;QAAKmF,SAAS,EAAC,QAAQ;QAAAC,QAAA,gBACrBpF,OAAA;UAAAoF,QAAA,EAAI;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACfxF,OAAA;UAAKmF,SAAS,EAAC,aAAa;UAAAC,QAAA,GACzBxE,iBAAiB,KAAK,QAAQ,gBAC7BZ,OAAA,CAAAE,SAAA;YAAAkF,QAAA,gBACEpF,OAAA;cAAKmF,SAAS,EAAC,cAAc;cAACoB,KAAK,EAAE;gBAAEQ,UAAU,EAAE;cAAiB;YAAE;cAAA1B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAC7ExF,OAAA;cAAAoF,QAAA,EAAM;YAAgB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAC7BxF,OAAA;cAAKmF,SAAS,EAAC,cAAc;cAACoB,KAAK,EAAE;gBAAEQ,UAAU,EAAE;cAAiB;YAAE;cAAA1B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAC7ExF,OAAA;cAAAoF,QAAA,EAAM;YAAiB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA,eAC9B,CAAC,gBAEHxF,OAAA,CAAAE,SAAA;YAAAkF,QAAA,gBACEpF,OAAA;cAAKmF,SAAS,EAAC,cAAc;cAACoB,KAAK,EAAE;gBAAEQ,UAAU,EAAE;cAAiB;YAAE;cAAA1B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAC7ExF,OAAA;cAAAoF,QAAA,GAAM,OAAK,EAACxE,iBAAiB,KAAK,OAAO,GAAG,cAAc,GAAG,QAAQ;YAAA;cAAAyE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eAC7ExF,OAAA;cAAKmF,SAAS,EAAC,cAAc;cAACoB,KAAK,EAAE;gBAAEQ,UAAU,EAAE;cAAiB;YAAE;cAAA1B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAC7ExF,OAAA;cAAAoF,QAAA,GAAM,MAAI,EAACxE,iBAAiB,KAAK,OAAO,GAAG,cAAc,GAAG,QAAQ;YAAA;cAAAyE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC;UAAA,eAC5E,CACH,eACDxF,OAAA;YAAKmF,SAAS,EAAC,cAAc;YAACoB,KAAK,EAAE;cAAEQ,UAAU,EAAE;YAAU;UAAE;YAAA1B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACtExF,OAAA;YAAAoF,QAAA,EAAM;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACnF,EAAA,CAzVID,YAAY;AAAA4G,EAAA,GAAZ5G,YAAY;AA2VlB,eAAeA,YAAY;AAAC,IAAA4G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}