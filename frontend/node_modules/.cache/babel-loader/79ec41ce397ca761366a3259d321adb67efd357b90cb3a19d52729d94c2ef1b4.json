{"ast":null,"code":"/**\n * number as a percentage\n * @param {number} value - Value to format\n * @param {number} decimals - Number of decimal places\n * @returns {string} Formatted percentage\n */export const formatPercentage=function(value){let decimals=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;if(value===null||value===undefined)return'N/A';return`${Number(value).toFixed(decimals)}%`;};/**\n   * number as currency\n   * @param {number} value - Value to format\n   * @param {string} currency - Currency code\n   * @param {number} decimals - Number of decimal places\n   * @returns {string} Formatted currency\n   */export const formatCurrency=function(value){let currency=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'USD';let decimals=arguments.length>2&&arguments[2]!==undefined?arguments[2]:2;if(value===null||value===undefined)return'N/A';return new Intl.NumberFormat('en-US',{style:'currency',currency,minimumFractionDigits:decimals,maximumFractionDigits:decimals}).format(value);};/**\n   * formatting a large number with commas and abbreviations\n   * @param {number} value - Value to format\n   * @param {number} decimals - Number of decimal places\n   * @returns {string} Formatted number\n   */export const formatNumber=function(value){let decimals=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;if(value===null||value===undefined)return'N/A';if(Math.abs(value)>=1000000000){return`${(value/1000000000).toFixed(decimals)}B`;}if(Math.abs(value)>=1000000){return`${(value/1000000).toFixed(decimals)}M`;}if(Math.abs(value)>=1000){return`${(value/1000).toFixed(decimals)}K`;}return value.toFixed(decimals);};/**\n   * get appropriate formatter based on indicator type\n   * @param {string} indicator - Indicator ID or type\n   * @returns {Function} Formatter function\n   */export const getFormatter=indicator=>{// Percentage indicators\nconst percentageIndicators=['UNRATE',// Unemployment Rate\n'FEDFUNDS',// Federal Funds Rate\n'T10Y2Y',// 10-Year Treasury Constant Maturity Minus 2-Year\n'CPIAUCSL',// CPI (when formatted as percent change)\n'PCEPI',// PCE Price Index (when formatted as percent change)\n'A191RI1Q225SBEA'// Real GDP percent change\n];// Currency indicators\nconst currencyIndicators=['GDP',// Gross Domestic Product\n'GDPC1'// Real Gross Domestic Product\n];if(percentageIndicators.includes(indicator)){return value=>formatPercentage(value);}if(currencyIndicators.includes(indicator)){return value=>formatCurrency(value,'USD');}// Default to regular number formatting\nreturn value=>formatNumber(value);};","map":{"version":3,"names":["formatPercentage","value","decimals","arguments","length","undefined","Number","toFixed","formatCurrency","currency","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","formatNumber","Math","abs","getFormatter","indicator","percentageIndicators","currencyIndicators","includes"],"sources":["/home/tazmak/Desktop/2024_Code/py-Projects/FRED-tracker/Federal-Reserve-Economy-Tracker/frontend/src/utils/formatUtils.js"],"sourcesContent":["/**\n * number as a percentage\n * @param {number} value - Value to format\n * @param {number} decimals - Number of decimal places\n * @returns {string} Formatted percentage\n */\nexport const formatPercentage = (value, decimals = 1) => {\n    if (value === null || value === undefined) return 'N/A';\n    \n    return `${Number(value).toFixed(decimals)}%`;\n  };\n  \n  /**\n   * number as currency\n   * @param {number} value - Value to format\n   * @param {string} currency - Currency code\n   * @param {number} decimals - Number of decimal places\n   * @returns {string} Formatted currency\n   */\n  export const formatCurrency = (value, currency = 'USD', decimals = 2) => {\n    if (value === null || value === undefined) return 'N/A';\n    \n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency,\n      minimumFractionDigits: decimals,\n      maximumFractionDigits: decimals,\n    }).format(value);\n  };\n  \n  /**\n   * formatting a large number with commas and abbreviations\n   * @param {number} value - Value to format\n   * @param {number} decimals - Number of decimal places\n   * @returns {string} Formatted number\n   */\n  export const formatNumber = (value, decimals = 1) => {\n    if (value === null || value === undefined) return 'N/A';\n    \n    if (Math.abs(value) >= 1000000000) {\n      return `${(value / 1000000000).toFixed(decimals)}B`;\n    }\n    \n    if (Math.abs(value) >= 1000000) {\n      return `${(value / 1000000).toFixed(decimals)}M`;\n    }\n    \n    if (Math.abs(value) >= 1000) {\n      return `${(value / 1000).toFixed(decimals)}K`;\n    }\n    \n    return value.toFixed(decimals);\n  };\n  \n  /**\n   * get appropriate formatter based on indicator type\n   * @param {string} indicator - Indicator ID or type\n   * @returns {Function} Formatter function\n   */\n  export const getFormatter = (indicator) => {\n    // Percentage indicators\n    const percentageIndicators = [\n      'UNRATE',  // Unemployment Rate\n      'FEDFUNDS', // Federal Funds Rate\n      'T10Y2Y',   // 10-Year Treasury Constant Maturity Minus 2-Year\n      'CPIAUCSL', // CPI (when formatted as percent change)\n      'PCEPI',    // PCE Price Index (when formatted as percent change)\n      'A191RI1Q225SBEA', // Real GDP percent change\n    ];\n    \n    // Currency indicators\n    const currencyIndicators = [\n      'GDP',      // Gross Domestic Product\n      'GDPC1',    // Real Gross Domestic Product\n    ];\n    \n    if (percentageIndicators.includes(indicator)) {\n      return (value) => formatPercentage(value);\n    }\n    \n    if (currencyIndicators.includes(indicator)) {\n      return (value) => formatCurrency(value, 'USD');\n    }\n    \n    // Default to regular number formatting\n    return (value) => formatNumber(value);\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}