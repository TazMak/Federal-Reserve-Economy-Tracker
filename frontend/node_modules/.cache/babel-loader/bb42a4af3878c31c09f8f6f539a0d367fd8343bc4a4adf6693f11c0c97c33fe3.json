{"ast":null,"code":"var _jsxFileName = \"/home/tazmak/Desktop/2024_Code/py-Projects/FRED-tracker/Federal-Reserve-Economy-Tracker/frontend/src/components/indicators/RegionalData.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport { ComposableMap, Geographies, Geography, ZoomableGroup } from \"react-simple-maps\";\n// Import d3-scale for color mapping\nimport { scaleLinear } from \"d3-scale\";\n\n// Use specific USA TopoJSON that includes state postal codes\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\n/**\n * RegionalData component for displaying economic data by state on an interactive map\n * Using react-simple-maps for the visualization\n */\nconst RegionalData = () => {\n  _s();\n  var _minMaxValues$min, _minMaxValues$max, _minMaxValues$max2, _minMaxValues$min2;\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [hoveredState, setHoveredState] = useState(null);\n  const [selectedIndicator, setSelectedIndicator] = useState('UNRATE'); // Default to Unemployment Rate\n  const [stateData, setStateData] = useState({});\n  const [minMaxValues, setMinMaxValues] = useState({\n    min: 0,\n    max: 10\n  });\n\n  // Available indicators to select from\n  const indicators = [{\n    id: 'UNRATE',\n    name: 'Unemployment Rate'\n  }, {\n    id: 'MSPUS',\n    name: 'Median House Price'\n  }, {\n    id: 'PCPI',\n    name: 'Per Capita Personal Income'\n  }];\n\n  // Create color scale based on the selected indicator and data range\n  const colorScale = useMemo(() => {\n    if (selectedIndicator === 'UNRATE') {\n      // For unemployment: low (green) is good, high (red) is bad\n      return scaleLinear().domain([minMaxValues.min, minMaxValues.max]).range([\"#00ff00\", \"#ff0000\"]);\n    } else {\n      // For prices/income: high (green) is good, low (red) is bad\n      return scaleLinear().domain([minMaxValues.min, minMaxValues.max]).range([\"#ff0000\", \"#00ff00\"]);\n    }\n  }, [selectedIndicator, minMaxValues]);\n\n  // Function to generate simulated data for development/testing\n  const generateSimulatedData = () => {\n    // Define state codes and names\n    const stateCodes = ['AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', 'WY', 'DC'];\n    const stateNames = {\n      'AL': 'Alabama',\n      'AK': 'Alaska',\n      'AZ': 'Arizona',\n      'AR': 'Arkansas',\n      'CA': 'California',\n      'CO': 'Colorado',\n      'CT': 'Connecticut',\n      'DE': 'Delaware',\n      'FL': 'Florida',\n      'GA': 'Georgia',\n      'HI': 'Hawaii',\n      'ID': 'Idaho',\n      'IL': 'Illinois',\n      'IN': 'Indiana',\n      'IA': 'Iowa',\n      'KS': 'Kansas',\n      'KY': 'Kentucky',\n      'LA': 'Louisiana',\n      'ME': 'Maine',\n      'MD': 'Maryland',\n      'MA': 'Massachusetts',\n      'MI': 'Michigan',\n      'MN': 'Minnesota',\n      'MS': 'Mississippi',\n      'MO': 'Missouri',\n      'MT': 'Montana',\n      'NE': 'Nebraska',\n      'NV': 'Nevada',\n      'NH': 'New Hampshire',\n      'NJ': 'New Jersey',\n      'NM': 'New Mexico',\n      'NY': 'New York',\n      'NC': 'North Carolina',\n      'ND': 'North Dakota',\n      'OH': 'Ohio',\n      'OK': 'Oklahoma',\n      'OR': 'Oregon',\n      'PA': 'Pennsylvania',\n      'RI': 'Rhode Island',\n      'SC': 'South Carolina',\n      'SD': 'South Dakota',\n      'TN': 'Tennessee',\n      'TX': 'Texas',\n      'UT': 'Utah',\n      'VT': 'Vermont',\n      'VA': 'Virginia',\n      'WA': 'Washington',\n      'WV': 'West Virginia',\n      'WI': 'Wisconsin',\n      'WY': 'Wyoming',\n      'DC': 'District of Columbia'\n    };\n\n    // Define different value ranges based on indicator\n    let minVal, maxVal;\n    switch (selectedIndicator) {\n      case 'UNRATE':\n        minVal = 1.9; // Minimum unemployment rate\n        maxVal = 5.8; // Maximum unemployment rate\n        break;\n      case 'MSPUS':\n        minVal = 150000; // Minimum house price\n        maxVal = 750000; // Maximum house price\n        break;\n      case 'PCPI':\n        minVal = 35000; // Minimum per capita income\n        maxVal = 80000; // Maximum per capita income\n        break;\n      default:\n        minVal = 0;\n        maxVal = 100;\n    }\n\n    // Update min/max state for the color scale\n    setMinMaxValues({\n      min: minVal,\n      max: maxVal\n    });\n\n    // Generate data for each state\n    const statesData = {};\n    stateCodes.forEach(code => {\n      // Randomly decide if some states have no data\n      const hasData = Math.random() > 0.1; // 10% chance of no data\n\n      if (hasData) {\n        // Generate a random value within the range\n        const value = minVal + Math.random() * (maxVal - minVal);\n        const roundedValue = selectedIndicator === 'UNRATE' ? parseFloat(value.toFixed(1)) // 1 decimal for rates\n        : Math.round(value); // Whole numbers for money values\n\n        statesData[code] = {\n          code,\n          name: stateNames[code],\n          value: roundedValue,\n          date: '2025-01-15'\n        };\n      } else {\n        statesData[code] = {\n          code,\n          name: stateNames[code],\n          value: null,\n          date: null\n        };\n      }\n    });\n    return statesData;\n  };\n\n  // Fetch or generate data when indicator changes\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        let statesData = {};\n\n        // Try to fetch from API first\n        try {\n          const response = await axios.get(`/api/regional/${selectedIndicator}`);\n\n          // Process API response into the format we need\n          if (response.data && response.data.states) {\n            const values = [];\n            response.data.states.forEach(state => {\n              if (state.value !== null && state.value !== undefined) {\n                values.push(state.value);\n                statesData[state.code] = state;\n              }\n            });\n\n            // Set min/max values for color scale\n            if (values.length > 0) {\n              setMinMaxValues({\n                min: Math.min(...values),\n                max: Math.max(...values)\n              });\n            }\n          }\n        } catch (err) {\n          console.warn(\"API call failed, using simulated data:\", err);\n          // Use simulated data if API fails\n          statesData = generateSimulatedData();\n        }\n        setStateData(statesData);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error setting up regional data:', err);\n        setError('Failed to load regional data. Please try again later.');\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [selectedIndicator]);\n\n  // Handle dropdown change\n  const handleIndicatorChange = e => {\n    setSelectedIndicator(e.target.value);\n  };\n\n  // Format value for display based on indicator type\n  const formatValue = (value, indicator) => {\n    if (value === null || value === undefined) return 'No data available';\n    switch (indicator) {\n      case 'UNRATE':\n        return `${value.toFixed(1)}%`;\n      case 'MSPUS':\n        return `$${value.toLocaleString()}`;\n      case 'PCPI':\n        return `$${value.toLocaleString()}`;\n      default:\n        return value.toLocaleString();\n    }\n  };\n\n  // Get indicator display name\n  const getIndicatorName = indicator => {\n    const ind = indicators.find(i => i.id === indicator);\n    return ind ? ind.name : indicator;\n  };\n\n  // Handle mouse enter on state\n  const handleStateEnter = geo => {\n    const stateCode = geo.properties.postal;\n    setHoveredState(stateCode);\n  };\n\n  // Handle mouse leave\n  const handleStateLeave = () => {\n    setHoveredState(null);\n  };\n\n  // Render state information panel\n  const renderStateInfo = () => {\n    if (!hoveredState || !stateData[hoveredState]) {\n      return null;\n    }\n    const state = stateData[hoveredState];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"state-details\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: state.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"state-metric\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: getIndicatorName(selectedIndicator)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"metric-value\",\n          children: formatValue(state.value, selectedIndicator)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"metric-date\",\n          children: [\"As of \", state.date || 'N/A']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"economic-overview\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Economic Overview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: state.overview || `${state.name}'s ${selectedIndicator === 'UNRATE' ? 'unemployment rate' : selectedIndicator === 'MSPUS' ? 'housing market' : 'personal income'} \n              shows ${state.value !== null ? selectedIndicator === 'UNRATE' ? state.value < 4 ? 'strong performance' : state.value < 6 ? 'moderate performance' : 'challenges' : selectedIndicator === 'MSPUS' ? state.value > 400000 ? 'high prices' : 'moderate prices' : state.value > 60000 ? 'high income levels' : 'moderate income levels' : 'no data available'}.`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"regional-data indicator-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Regional Economic Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"indicator-select\",\n          children: \"Select Indicator: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"indicator-select\",\n          value: selectedIndicator,\n          onChange: handleIndicatorChange,\n          children: indicators.map(indicator => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: indicator.id,\n            children: indicator.name\n          }, indicator.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading regional data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"regional-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-and-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"us-map-container\",\n          children: /*#__PURE__*/_jsxDEV(ComposableMap, {\n            projection: \"geoAlbersUsa\",\n            projectionConfig: {\n              scale: 1100\n            },\n            width: 800,\n            height: 500,\n            style: {\n              width: \"100%\",\n              height: \"auto\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Geographies, {\n              geography: geoUrl,\n              children: ({\n                geographies\n              }) => geographies.map(geo => {\n                // Get state code from properties\n                const stateCode = geo.properties.postal;\n                const state = stateData[stateCode];\n                const isHovered = hoveredState === stateCode;\n\n                // Set fill color based on data\n                let fillColor = \"#D3D3D3\"; // Default gray for no data\n                if (state && state.value !== null && state.value !== undefined) {\n                  fillColor = colorScale(state.value);\n                }\n                return /*#__PURE__*/_jsxDEV(Geography, {\n                  geography: geo,\n                  fill: fillColor,\n                  stroke: \"#FFFFFF\",\n                  strokeWidth: 0.5,\n                  onClick: () => {\n                    // Optionally add click handler\n                    console.log(`Clicked on ${stateCode}`);\n                  },\n                  onMouseEnter: () => handleStateEnter(geo),\n                  onMouseLeave: handleStateLeave,\n                  style: {\n                    default: {\n                      outline: \"none\"\n                    },\n                    hover: {\n                      outline: \"none\",\n                      stroke: \"#000000\",\n                      strokeWidth: 1.5,\n                      cursor: \"pointer\"\n                    },\n                    pressed: {\n                      outline: \"none\"\n                    }\n                  }\n                }, geo.rsmKey, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 25\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"state-info-panel\",\n          children: hoveredState ? renderStateInfo() : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"default-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Hover over a state to view details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Currently displaying: \", getIndicatorName(selectedIndicator)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Legend\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-items\",\n          children: [selectedIndicator === 'UNRATE' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"legend-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"legend-color\",\n                style: {\n                  background: '#00ff00'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Low Unemployment (\", (_minMaxValues$min = minMaxValues.min) === null || _minMaxValues$min === void 0 ? void 0 : _minMaxValues$min.toFixed(1), \"%)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"legend-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"legend-color\",\n                style: {\n                  background: '#ff0000'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"High Unemployment (\", (_minMaxValues$max = minMaxValues.max) === null || _minMaxValues$max === void 0 ? void 0 : _minMaxValues$max.toFixed(1), \"%)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 360,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"legend-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"legend-color\",\n                style: {\n                  background: '#00ff00'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 366,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"High \", selectedIndicator === 'MSPUS' ? 'House Prices' : 'Income', \"(\", selectedIndicator === 'MSPUS' || selectedIndicator === 'PCPI' ? '$' + ((_minMaxValues$max2 = minMaxValues.max) === null || _minMaxValues$max2 === void 0 ? void 0 : _minMaxValues$max2.toLocaleString()) : minMaxValues.max, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"legend-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"legend-color\",\n                style: {\n                  background: '#ff0000'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 373,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Low \", selectedIndicator === 'MSPUS' ? 'House Prices' : 'Income', \"(\", selectedIndicator === 'MSPUS' || selectedIndicator === 'PCPI' ? '$' + ((_minMaxValues$min2 = minMaxValues.min) === null || _minMaxValues$min2 === void 0 ? void 0 : _minMaxValues$min2.toLocaleString()) : minMaxValues.min, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"legend-color\",\n              style: {\n                background: '#D3D3D3'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"No Data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 5\n  }, this);\n};\n_s(RegionalData, \"do2ogrwg0jUmQ3BigpO81R3ggNc=\");\n_c = RegionalData;\nexport default RegionalData;\nvar _c;\n$RefreshReg$(_c, \"RegionalData\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","axios","ComposableMap","Geographies","Geography","ZoomableGroup","scaleLinear","jsxDEV","_jsxDEV","Fragment","_Fragment","geoUrl","RegionalData","_s","_minMaxValues$min","_minMaxValues$max","_minMaxValues$max2","_minMaxValues$min2","loading","setLoading","error","setError","hoveredState","setHoveredState","selectedIndicator","setSelectedIndicator","stateData","setStateData","minMaxValues","setMinMaxValues","min","max","indicators","id","name","colorScale","domain","range","generateSimulatedData","stateCodes","stateNames","minVal","maxVal","statesData","forEach","code","hasData","Math","random","value","roundedValue","parseFloat","toFixed","round","date","fetchData","response","get","data","states","values","state","undefined","push","length","err","console","warn","handleIndicatorChange","e","target","formatValue","indicator","toLocaleString","getIndicatorName","ind","find","i","handleStateEnter","geo","stateCode","properties","postal","handleStateLeave","renderStateInfo","className","children","fileName","_jsxFileName","lineNumber","columnNumber","overview","htmlFor","onChange","map","projection","projectionConfig","scale","width","height","style","geography","geographies","isHovered","fillColor","fill","stroke","strokeWidth","onClick","log","onMouseEnter","onMouseLeave","default","outline","hover","cursor","pressed","rsmKey","background","_c","$RefreshReg$"],"sources":["/home/tazmak/Desktop/2024_Code/py-Projects/FRED-tracker/Federal-Reserve-Economy-Tracker/frontend/src/components/indicators/RegionalData.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport { \n  ComposableMap, \n  Geographies, \n  Geography, \n  ZoomableGroup \n} from \"react-simple-maps\";\n// Import d3-scale for color mapping\nimport { scaleLinear } from \"d3-scale\";\n\n// Use specific USA TopoJSON that includes state postal codes\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\n/**\n * RegionalData component for displaying economic data by state on an interactive map\n * Using react-simple-maps for the visualization\n */\nconst RegionalData = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [hoveredState, setHoveredState] = useState(null);\n  const [selectedIndicator, setSelectedIndicator] = useState('UNRATE'); // Default to Unemployment Rate\n  const [stateData, setStateData] = useState({});\n  const [minMaxValues, setMinMaxValues] = useState({ min: 0, max: 10 });\n\n  // Available indicators to select from\n  const indicators = [\n    { id: 'UNRATE', name: 'Unemployment Rate' },\n    { id: 'MSPUS', name: 'Median House Price' },\n    { id: 'PCPI', name: 'Per Capita Personal Income' }\n  ];\n\n  // Create color scale based on the selected indicator and data range\n  const colorScale = useMemo(() => {\n    if (selectedIndicator === 'UNRATE') {\n      // For unemployment: low (green) is good, high (red) is bad\n      return scaleLinear()\n        .domain([minMaxValues.min, minMaxValues.max])\n        .range([\"#00ff00\", \"#ff0000\"]);\n    } else {\n      // For prices/income: high (green) is good, low (red) is bad\n      return scaleLinear()\n        .domain([minMaxValues.min, minMaxValues.max])\n        .range([\"#ff0000\", \"#00ff00\"]);\n    }\n  }, [selectedIndicator, minMaxValues]);\n\n  // Function to generate simulated data for development/testing\n  const generateSimulatedData = () => {\n    // Define state codes and names\n    const stateCodes = [\n      'AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA', \n      'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD', \n      'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', \n      'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC', \n      'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', 'WY', 'DC'\n    ];\n    \n    const stateNames = {\n      'AL': 'Alabama', 'AK': 'Alaska', 'AZ': 'Arizona', 'AR': 'Arkansas',\n      'CA': 'California', 'CO': 'Colorado', 'CT': 'Connecticut', 'DE': 'Delaware',\n      'FL': 'Florida', 'GA': 'Georgia', 'HI': 'Hawaii', 'ID': 'Idaho',\n      'IL': 'Illinois', 'IN': 'Indiana', 'IA': 'Iowa', 'KS': 'Kansas',\n      'KY': 'Kentucky', 'LA': 'Louisiana', 'ME': 'Maine', 'MD': 'Maryland',\n      'MA': 'Massachusetts', 'MI': 'Michigan', 'MN': 'Minnesota', 'MS': 'Mississippi',\n      'MO': 'Missouri', 'MT': 'Montana', 'NE': 'Nebraska', 'NV': 'Nevada',\n      'NH': 'New Hampshire', 'NJ': 'New Jersey', 'NM': 'New Mexico', 'NY': 'New York',\n      'NC': 'North Carolina', 'ND': 'North Dakota', 'OH': 'Ohio', 'OK': 'Oklahoma',\n      'OR': 'Oregon', 'PA': 'Pennsylvania', 'RI': 'Rhode Island', 'SC': 'South Carolina',\n      'SD': 'South Dakota', 'TN': 'Tennessee', 'TX': 'Texas', 'UT': 'Utah',\n      'VT': 'Vermont', 'VA': 'Virginia', 'WA': 'Washington', 'WV': 'West Virginia',\n      'WI': 'Wisconsin', 'WY': 'Wyoming', 'DC': 'District of Columbia'\n    };\n    \n    // Define different value ranges based on indicator\n    let minVal, maxVal;\n    switch (selectedIndicator) {\n      case 'UNRATE':\n        minVal = 1.9;  // Minimum unemployment rate\n        maxVal = 5.8;  // Maximum unemployment rate\n        break;\n      case 'MSPUS':\n        minVal = 150000;  // Minimum house price\n        maxVal = 750000;  // Maximum house price\n        break;\n      case 'PCPI':\n        minVal = 35000;  // Minimum per capita income\n        maxVal = 80000;  // Maximum per capita income\n        break;\n      default:\n        minVal = 0;\n        maxVal = 100;\n    }\n    \n    // Update min/max state for the color scale\n    setMinMaxValues({ min: minVal, max: maxVal });\n    \n    // Generate data for each state\n    const statesData = {};\n    stateCodes.forEach(code => {\n      // Randomly decide if some states have no data\n      const hasData = Math.random() > 0.1; // 10% chance of no data\n      \n      if (hasData) {\n        // Generate a random value within the range\n        const value = minVal + Math.random() * (maxVal - minVal);\n        const roundedValue = selectedIndicator === 'UNRATE' \n          ? parseFloat(value.toFixed(1))  // 1 decimal for rates\n          : Math.round(value);            // Whole numbers for money values\n          \n        statesData[code] = {\n          code,\n          name: stateNames[code],\n          value: roundedValue,\n          date: '2025-01-15'\n        };\n      } else {\n        statesData[code] = {\n          code,\n          name: stateNames[code],\n          value: null,\n          date: null\n        };\n      }\n    });\n    \n    return statesData;\n  };\n\n  // Fetch or generate data when indicator changes\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        \n        let statesData = {};\n        \n        // Try to fetch from API first\n        try {\n          const response = await axios.get(`/api/regional/${selectedIndicator}`);\n          \n          // Process API response into the format we need\n          if (response.data && response.data.states) {\n            const values = [];\n            \n            response.data.states.forEach(state => {\n              if (state.value !== null && state.value !== undefined) {\n                values.push(state.value);\n                statesData[state.code] = state;\n              }\n            });\n            \n            // Set min/max values for color scale\n            if (values.length > 0) {\n              setMinMaxValues({\n                min: Math.min(...values),\n                max: Math.max(...values)\n              });\n            }\n          }\n        } catch (err) {\n          console.warn(\"API call failed, using simulated data:\", err);\n          // Use simulated data if API fails\n          statesData = generateSimulatedData();\n        }\n        \n        setStateData(statesData);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error setting up regional data:', err);\n        setError('Failed to load regional data. Please try again later.');\n        setLoading(false);\n      }\n    };\n    \n    fetchData();\n  }, [selectedIndicator]);\n\n  // Handle dropdown change\n  const handleIndicatorChange = (e) => {\n    setSelectedIndicator(e.target.value);\n  };\n\n  // Format value for display based on indicator type\n  const formatValue = (value, indicator) => {\n    if (value === null || value === undefined) return 'No data available';\n    \n    switch (indicator) {\n      case 'UNRATE':\n        return `${value.toFixed(1)}%`;\n      case 'MSPUS':\n        return `$${value.toLocaleString()}`;\n      case 'PCPI':\n        return `$${value.toLocaleString()}`;\n      default:\n        return value.toLocaleString();\n    }\n  };\n\n  // Get indicator display name\n  const getIndicatorName = (indicator) => {\n    const ind = indicators.find(i => i.id === indicator);\n    return ind ? ind.name : indicator;\n  };\n  \n  // Handle mouse enter on state\n  const handleStateEnter = (geo) => {\n    const stateCode = geo.properties.postal;\n    setHoveredState(stateCode);\n  };\n  \n  // Handle mouse leave\n  const handleStateLeave = () => {\n    setHoveredState(null);\n  };\n  \n  // Render state information panel\n  const renderStateInfo = () => {\n    if (!hoveredState || !stateData[hoveredState]) {\n      return null;\n    }\n    \n    const state = stateData[hoveredState];\n    \n    return (\n      <div className=\"state-details\">\n        <h3>{state.name}</h3>\n        <div className=\"state-metric\">\n          <h4>{getIndicatorName(selectedIndicator)}</h4>\n          <div className=\"metric-value\">\n            {formatValue(state.value, selectedIndicator)}\n          </div>\n          <div className=\"metric-date\">\n            As of {state.date || 'N/A'}\n          </div>\n        </div>\n        <div className=\"economic-overview\">\n          <h4>Economic Overview</h4>\n          <p>\n            {state.overview || \n              `${state.name}'s ${selectedIndicator === 'UNRATE' ? 'unemployment rate' : \n                selectedIndicator === 'MSPUS' ? 'housing market' : 'personal income'} \n              shows ${state.value !== null ? \n                selectedIndicator === 'UNRATE' ? \n                  state.value < 4 ? 'strong performance' : \n                  state.value < 6 ? 'moderate performance' : 'challenges' : \n                selectedIndicator === 'MSPUS' ? \n                  state.value > 400000 ? 'high prices' : 'moderate prices' : \n                  state.value > 60000 ? 'high income levels' : 'moderate income levels' \n                : 'no data available'}.`}\n          </p>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"regional-data indicator-page\">\n      <h2>Regional Economic Data</h2>\n      \n      <div className=\"controls\">\n        <div className=\"selector\">\n          <label htmlFor=\"indicator-select\">Select Indicator: </label>\n          <select \n            id=\"indicator-select\" \n            value={selectedIndicator} \n            onChange={handleIndicatorChange}\n          >\n            {indicators.map(indicator => (\n              <option key={indicator.id} value={indicator.id}>\n                {indicator.name}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n      \n      {loading ? (\n        <div className=\"loading\">Loading regional data...</div>\n      ) : error ? (\n        <div className=\"error\">{error}</div>\n      ) : (\n        <div className=\"regional-content\">\n          <div className=\"map-and-details\">\n            <div className=\"us-map-container\">\n              {/* Using react-simple-maps with proper configuration */}\n              <ComposableMap \n                projection=\"geoAlbersUsa\"\n                projectionConfig={{ scale: 1100 }}\n                width={800}\n                height={500}\n                style={{ width: \"100%\", height: \"auto\" }}\n              >\n                <Geographies geography={geoUrl}>\n                  {({ geographies }) =>\n                    geographies.map(geo => {\n                      // Get state code from properties\n                      const stateCode = geo.properties.postal;\n                      const state = stateData[stateCode];\n                      const isHovered = hoveredState === stateCode;\n                      \n                      // Set fill color based on data\n                      let fillColor = \"#D3D3D3\"; // Default gray for no data\n                      if (state && state.value !== null && state.value !== undefined) {\n                        fillColor = colorScale(state.value);\n                      }\n                      \n                      return (\n                        <Geography\n                          key={geo.rsmKey}\n                          geography={geo}\n                          fill={fillColor}\n                          stroke=\"#FFFFFF\"\n                          strokeWidth={0.5}\n                          onClick={() => {\n                            // Optionally add click handler\n                            console.log(`Clicked on ${stateCode}`);\n                          }}\n                          onMouseEnter={() => handleStateEnter(geo)}\n                          onMouseLeave={handleStateLeave}\n                          style={{\n                            default: { outline: \"none\" },\n                            hover: { \n                              outline: \"none\", \n                              stroke: \"#000000\", \n                              strokeWidth: 1.5,\n                              cursor: \"pointer\"\n                            },\n                            pressed: { outline: \"none\" }\n                          }}\n                        />\n                      );\n                    })\n                  }\n                </Geographies>\n              </ComposableMap>\n            </div>\n            <div className=\"state-info-panel\">\n              {hoveredState ? renderStateInfo() : (\n                <div className=\"default-info\">\n                  <h3>Hover over a state to view details</h3>\n                  <p>Currently displaying: {getIndicatorName(selectedIndicator)}</p>\n                </div>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"legend\">\n            <h3>Legend</h3>\n            <div className=\"legend-items\">\n              {selectedIndicator === 'UNRATE' ? (\n                <>\n                  <div className=\"legend-item\">\n                    <div className=\"legend-color\" style={{ background: '#00ff00' }}></div>\n                    <span>Low Unemployment ({minMaxValues.min?.toFixed(1)}%)</span>\n                  </div>\n                  <div className=\"legend-item\">\n                    <div className=\"legend-color\" style={{ background: '#ff0000' }}></div>\n                    <span>High Unemployment ({minMaxValues.max?.toFixed(1)}%)</span>\n                  </div>\n                </>\n              ) : (\n                <>\n                  <div className=\"legend-item\">\n                    <div className=\"legend-color\" style={{ background: '#00ff00' }}></div>\n                    <span>High {selectedIndicator === 'MSPUS' ? 'House Prices' : 'Income'} \n                    ({selectedIndicator === 'MSPUS' || selectedIndicator === 'PCPI' ? \n                      '$' + minMaxValues.max?.toLocaleString() : \n                      minMaxValues.max})</span>\n                  </div>\n                  <div className=\"legend-item\">\n                    <div className=\"legend-color\" style={{ background: '#ff0000' }}></div>\n                    <span>Low {selectedIndicator === 'MSPUS' ? 'House Prices' : 'Income'}\n                    ({selectedIndicator === 'MSPUS' || selectedIndicator === 'PCPI' ? \n                      '$' + minMaxValues.min?.toLocaleString() : \n                      minMaxValues.min})</span>\n                  </div>\n                </>\n              )}\n              <div className=\"legend-item\">\n                <div className=\"legend-color\" style={{ background: '#D3D3D3' }}></div>\n                <span>No Data</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default RegionalData;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}