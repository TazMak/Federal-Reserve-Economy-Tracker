{"ast":null,"code":"var _jsxFileName = \"/home/tazmak/Desktop/2024_Code/py-Projects/FRED-tracker/Federal-Reserve-Economy-Tracker/frontend/src/components/charts/YieldCurve.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js/auto';\n\n/**\n * YieldCurve component for displaying Treasury yield curve\n * @param {Object} props - Component props\n * @param {Object} props.data - Yield curve data object with maturities as keys and yields as values\n * @param {string} props.date - Date of the yield curve data\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst YieldCurve = ({\n  data = {},\n  date = ''\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  useEffect(() => {\n    // If chart already exists, destroy it before creating a new one\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    if (!data || Object.keys(data).length === 0 || !chartRef.current) {\n      return;\n    }\n    const ctx = chartRef.current.getContext('2d');\n\n    // Define the standard order of Treasury maturities\n    const maturities = ['1 Mo', '3 Mo', '6 Mo', '1 Yr', '2 Yr', '3 Yr', '5 Yr', '7 Yr', '10 Yr', '20 Yr', '30 Yr'];\n\n    // Filter and sort the data based on available maturities\n    const filteredMaturities = maturities.filter(maturity => data[maturity] !== undefined);\n    const yields = filteredMaturities.map(maturity => data[maturity]);\n\n    // Prepare chart data\n    const chartData = {\n      labels: filteredMaturities,\n      datasets: [{\n        label: 'Treasury Yield Curve',\n        data: yields,\n        borderColor: '#3366cc',\n        backgroundColor: 'rgba(51, 102, 204, 0.1)',\n        borderWidth: 3,\n        fill: true,\n        tension: 0.4,\n        pointRadius: 5,\n        pointHoverRadius: 7\n      }]\n    };\n\n    // Create new chart\n    chartInstance.current = new Chart(ctx, {\n      type: 'line',\n      data: chartData,\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          title: {\n            display: true,\n            text: `Treasury Yield Curve (${date})`,\n            font: {\n              size: 16\n            }\n          },\n          legend: {\n            display: false\n          },\n          tooltip: {\n            callbacks: {\n              label: function (context) {\n                return `${context.parsed.y.toFixed(2)}%`;\n              }\n            }\n          }\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Maturity',\n              font: {\n                weight: 'bold'\n              }\n            },\n            grid: {\n              display: false\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Yield (%)',\n              font: {\n                weight: 'bold'\n              }\n            },\n            grid: {\n              color: '#eee'\n            },\n            ticks: {\n              callback: function (value) {\n                return value.toFixed(2) + '%';\n              }\n            }\n          }\n        }\n      }\n    });\n\n    // Cleanup function\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [data, date]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    style: {\n      height: '350px'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s(YieldCurve, \"u5+iHnwD4hjVcMuzTE/TbI78erc=\");\n_c = YieldCurve;\nexport default YieldCurve;\nvar _c;\n$RefreshReg$(_c, \"YieldCurve\");","map":{"version":3,"names":["React","useRef","useEffect","Chart","jsxDEV","_jsxDEV","YieldCurve","data","date","_s","chartRef","chartInstance","current","destroy","Object","keys","length","ctx","getContext","maturities","filteredMaturities","filter","maturity","undefined","yields","map","chartData","labels","datasets","label","borderColor","backgroundColor","borderWidth","fill","tension","pointRadius","pointHoverRadius","type","options","responsive","maintainAspectRatio","plugins","title","display","text","font","size","legend","tooltip","callbacks","context","parsed","y","toFixed","scales","x","weight","grid","color","ticks","callback","value","className","style","height","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/tazmak/Desktop/2024_Code/py-Projects/FRED-tracker/Federal-Reserve-Economy-Tracker/frontend/src/components/charts/YieldCurve.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js/auto';\n\n/**\n * YieldCurve component for displaying Treasury yield curve\n * @param {Object} props - Component props\n * @param {Object} props.data - Yield curve data object with maturities as keys and yields as values\n * @param {string} props.date - Date of the yield curve data\n */\nconst YieldCurve = ({ \n  data = {}, \n  date = '' \n}) => {\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n\n  useEffect(() => {\n    // If chart already exists, destroy it before creating a new one\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    \n    if (!data || Object.keys(data).length === 0 || !chartRef.current) {\n      return;\n    }\n    \n    const ctx = chartRef.current.getContext('2d');\n    \n    // Define the standard order of Treasury maturities\n    const maturities = ['1 Mo', '3 Mo', '6 Mo', '1 Yr', '2 Yr', '3 Yr', '5 Yr', '7 Yr', '10 Yr', '20 Yr', '30 Yr'];\n    \n    // Filter and sort the data based on available maturities\n    const filteredMaturities = maturities.filter(maturity => data[maturity] !== undefined);\n    const yields = filteredMaturities.map(maturity => data[maturity]);\n    \n    // Prepare chart data\n    const chartData = {\n      labels: filteredMaturities,\n      datasets: [\n        {\n          label: 'Treasury Yield Curve',\n          data: yields,\n          borderColor: '#3366cc',\n          backgroundColor: 'rgba(51, 102, 204, 0.1)',\n          borderWidth: 3,\n          fill: true,\n          tension: 0.4,\n          pointRadius: 5,\n          pointHoverRadius: 7\n        }\n      ]\n    };\n    \n    // Create new chart\n    chartInstance.current = new Chart(ctx, {\n      type: 'line',\n      data: chartData,\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          title: {\n            display: true,\n            text: `Treasury Yield Curve (${date})`,\n            font: {\n              size: 16\n            }\n          },\n          legend: {\n            display: false,\n          },\n          tooltip: {\n            callbacks: {\n              label: function(context) {\n                return `${context.parsed.y.toFixed(2)}%`;\n              }\n            }\n          }\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Maturity',\n              font: {\n                weight: 'bold'\n              }\n            },\n            grid: {\n              display: false\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Yield (%)',\n              font: {\n                weight: 'bold'\n              }\n            },\n            grid: {\n              color: '#eee'\n            },\n            ticks: {\n              callback: function(value) {\n                return value.toFixed(2) + '%';\n              }\n            }\n          }\n        }\n      }\n    });\n    \n    // Cleanup function\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [data, date]);\n\n  return (\n    <div className=\"chart-container\" style={{ height: '350px' }}>\n      <canvas ref={chartRef}></canvas>\n    </div>\n  );\n};\n\nexport default YieldCurve;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,OAAOC,KAAK,MAAM,eAAe;;AAEjC;AACA;AACA;AACA;AACA;AACA;AALA,SAAAC,MAAA,IAAAC,OAAA;AAMA,MAAMC,UAAU,GAAGA,CAAC;EAClBC,IAAI,GAAG,CAAC,CAAC;EACTC,IAAI,GAAG;AACT,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,QAAQ,GAAGT,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMU,aAAa,GAAGV,MAAM,CAAC,IAAI,CAAC;EAElCC,SAAS,CAAC,MAAM;IACd;IACA,IAAIS,aAAa,CAACC,OAAO,EAAE;MACzBD,aAAa,CAACC,OAAO,CAACC,OAAO,CAAC,CAAC;IACjC;IAEA,IAAI,CAACN,IAAI,IAAIO,MAAM,CAACC,IAAI,CAACR,IAAI,CAAC,CAACS,MAAM,KAAK,CAAC,IAAI,CAACN,QAAQ,CAACE,OAAO,EAAE;MAChE;IACF;IAEA,MAAMK,GAAG,GAAGP,QAAQ,CAACE,OAAO,CAACM,UAAU,CAAC,IAAI,CAAC;;IAE7C;IACA,MAAMC,UAAU,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;;IAE9G;IACA,MAAMC,kBAAkB,GAAGD,UAAU,CAACE,MAAM,CAACC,QAAQ,IAAIf,IAAI,CAACe,QAAQ,CAAC,KAAKC,SAAS,CAAC;IACtF,MAAMC,MAAM,GAAGJ,kBAAkB,CAACK,GAAG,CAACH,QAAQ,IAAIf,IAAI,CAACe,QAAQ,CAAC,CAAC;;IAEjE;IACA,MAAMI,SAAS,GAAG;MAChBC,MAAM,EAAEP,kBAAkB;MAC1BQ,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,sBAAsB;QAC7BtB,IAAI,EAAEiB,MAAM;QACZM,WAAW,EAAE,SAAS;QACtBC,eAAe,EAAE,yBAAyB;QAC1CC,WAAW,EAAE,CAAC;QACdC,IAAI,EAAE,IAAI;QACVC,OAAO,EAAE,GAAG;QACZC,WAAW,EAAE,CAAC;QACdC,gBAAgB,EAAE;MACpB,CAAC;IAEL,CAAC;;IAED;IACAzB,aAAa,CAACC,OAAO,GAAG,IAAIT,KAAK,CAACc,GAAG,EAAE;MACrCoB,IAAI,EAAE,MAAM;MACZ9B,IAAI,EAAEmB,SAAS;MACfY,OAAO,EAAE;QACPC,UAAU,EAAE,IAAI;QAChBC,mBAAmB,EAAE,KAAK;QAC1BC,OAAO,EAAE;UACPC,KAAK,EAAE;YACLC,OAAO,EAAE,IAAI;YACbC,IAAI,EAAE,yBAAyBpC,IAAI,GAAG;YACtCqC,IAAI,EAAE;cACJC,IAAI,EAAE;YACR;UACF,CAAC;UACDC,MAAM,EAAE;YACNJ,OAAO,EAAE;UACX,CAAC;UACDK,OAAO,EAAE;YACPC,SAAS,EAAE;cACTpB,KAAK,EAAE,SAAAA,CAASqB,OAAO,EAAE;gBACvB,OAAO,GAAGA,OAAO,CAACC,MAAM,CAACC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,GAAG;cAC1C;YACF;UACF;QACF,CAAC;QACDC,MAAM,EAAE;UACNC,CAAC,EAAE;YACDb,KAAK,EAAE;cACLC,OAAO,EAAE,IAAI;cACbC,IAAI,EAAE,UAAU;cAChBC,IAAI,EAAE;gBACJW,MAAM,EAAE;cACV;YACF,CAAC;YACDC,IAAI,EAAE;cACJd,OAAO,EAAE;YACX;UACF,CAAC;UACDS,CAAC,EAAE;YACDV,KAAK,EAAE;cACLC,OAAO,EAAE,IAAI;cACbC,IAAI,EAAE,WAAW;cACjBC,IAAI,EAAE;gBACJW,MAAM,EAAE;cACV;YACF,CAAC;YACDC,IAAI,EAAE;cACJC,KAAK,EAAE;YACT,CAAC;YACDC,KAAK,EAAE;cACLC,QAAQ,EAAE,SAAAA,CAASC,KAAK,EAAE;gBACxB,OAAOA,KAAK,CAACR,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG;cAC/B;YACF;UACF;QACF;MACF;IACF,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACX,IAAI1C,aAAa,CAACC,OAAO,EAAE;QACzBD,aAAa,CAACC,OAAO,CAACC,OAAO,CAAC,CAAC;MACjC;IACF,CAAC;EACH,CAAC,EAAE,CAACN,IAAI,EAAEC,IAAI,CAAC,CAAC;EAEhB,oBACEH,OAAA;IAAKyD,SAAS,EAAC,iBAAiB;IAACC,KAAK,EAAE;MAAEC,MAAM,EAAE;IAAQ,CAAE;IAAAC,QAAA,eAC1D5D,OAAA;MAAQ6D,GAAG,EAAExD;IAAS;MAAAyD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7B,CAAC;AAEV,CAAC;AAAC7D,EAAA,CArHIH,UAAU;AAAAiE,EAAA,GAAVjE,UAAU;AAuHhB,eAAeA,UAAU;AAAC,IAAAiE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}